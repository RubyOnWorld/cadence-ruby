#
# Autogenerated by Thrift Compiler (0.12.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require_relative './cadence_types'

module CadenceThrift
  module WorkflowService
    class Client
      include ::Thrift::Client

      def RegisterDomain(registerRequest)
        send_RegisterDomain(registerRequest)
        recv_RegisterDomain()
      end

      def send_RegisterDomain(registerRequest)
        send_message('RegisterDomain', RegisterDomain_args, :registerRequest => registerRequest)
      end

      def recv_RegisterDomain()
        result = receive_message(RegisterDomain_result)
        raise result.badRequestError unless result.badRequestError.nil?
        raise result.internalServiceError unless result.internalServiceError.nil?
        raise result.domainExistsError unless result.domainExistsError.nil?
        raise result.serviceBusyError unless result.serviceBusyError.nil?
        raise result.clientVersionNotSupportedError unless result.clientVersionNotSupportedError.nil?
        return
      end

      def DescribeDomain(describeRequest)
        send_DescribeDomain(describeRequest)
        return recv_DescribeDomain()
      end

      def send_DescribeDomain(describeRequest)
        send_message('DescribeDomain', DescribeDomain_args, :describeRequest => describeRequest)
      end

      def recv_DescribeDomain()
        result = receive_message(DescribeDomain_result)
        return result.success unless result.success.nil?
        raise result.badRequestError unless result.badRequestError.nil?
        raise result.internalServiceError unless result.internalServiceError.nil?
        raise result.entityNotExistError unless result.entityNotExistError.nil?
        raise result.serviceBusyError unless result.serviceBusyError.nil?
        raise result.clientVersionNotSupportedError unless result.clientVersionNotSupportedError.nil?
        raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'DescribeDomain failed: unknown result')
      end

      def ListDomains(listRequest)
        send_ListDomains(listRequest)
        return recv_ListDomains()
      end

      def send_ListDomains(listRequest)
        send_message('ListDomains', ListDomains_args, :listRequest => listRequest)
      end

      def recv_ListDomains()
        result = receive_message(ListDomains_result)
        return result.success unless result.success.nil?
        raise result.badRequestError unless result.badRequestError.nil?
        raise result.internalServiceError unless result.internalServiceError.nil?
        raise result.entityNotExistError unless result.entityNotExistError.nil?
        raise result.serviceBusyError unless result.serviceBusyError.nil?
        raise result.clientVersionNotSupportedError unless result.clientVersionNotSupportedError.nil?
        raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'ListDomains failed: unknown result')
      end

      def UpdateDomain(updateRequest)
        send_UpdateDomain(updateRequest)
        return recv_UpdateDomain()
      end

      def send_UpdateDomain(updateRequest)
        send_message('UpdateDomain', UpdateDomain_args, :updateRequest => updateRequest)
      end

      def recv_UpdateDomain()
        result = receive_message(UpdateDomain_result)
        return result.success unless result.success.nil?
        raise result.badRequestError unless result.badRequestError.nil?
        raise result.internalServiceError unless result.internalServiceError.nil?
        raise result.entityNotExistError unless result.entityNotExistError.nil?
        raise result.serviceBusyError unless result.serviceBusyError.nil?
        raise result.domainNotActiveError unless result.domainNotActiveError.nil?
        raise result.clientVersionNotSupportedError unless result.clientVersionNotSupportedError.nil?
        raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'UpdateDomain failed: unknown result')
      end

      def DeprecateDomain(deprecateRequest)
        send_DeprecateDomain(deprecateRequest)
        recv_DeprecateDomain()
      end

      def send_DeprecateDomain(deprecateRequest)
        send_message('DeprecateDomain', DeprecateDomain_args, :deprecateRequest => deprecateRequest)
      end

      def recv_DeprecateDomain()
        result = receive_message(DeprecateDomain_result)
        raise result.badRequestError unless result.badRequestError.nil?
        raise result.internalServiceError unless result.internalServiceError.nil?
        raise result.entityNotExistError unless result.entityNotExistError.nil?
        raise result.serviceBusyError unless result.serviceBusyError.nil?
        raise result.domainNotActiveError unless result.domainNotActiveError.nil?
        raise result.clientVersionNotSupportedError unless result.clientVersionNotSupportedError.nil?
        return
      end

      def StartWorkflowExecution(startRequest)
        send_StartWorkflowExecution(startRequest)
        return recv_StartWorkflowExecution()
      end

      def send_StartWorkflowExecution(startRequest)
        send_message('StartWorkflowExecution', StartWorkflowExecution_args, :startRequest => startRequest)
      end

      def recv_StartWorkflowExecution()
        result = receive_message(StartWorkflowExecution_result)
        return result.success unless result.success.nil?
        raise result.badRequestError unless result.badRequestError.nil?
        raise result.internalServiceError unless result.internalServiceError.nil?
        raise result.sessionAlreadyExistError unless result.sessionAlreadyExistError.nil?
        raise result.serviceBusyError unless result.serviceBusyError.nil?
        raise result.domainNotActiveError unless result.domainNotActiveError.nil?
        raise result.limitExceededError unless result.limitExceededError.nil?
        raise result.entityNotExistError unless result.entityNotExistError.nil?
        raise result.clientVersionNotSupportedError unless result.clientVersionNotSupportedError.nil?
        raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'StartWorkflowExecution failed: unknown result')
      end

      def GetWorkflowExecutionHistory(getRequest)
        send_GetWorkflowExecutionHistory(getRequest)
        return recv_GetWorkflowExecutionHistory()
      end

      def send_GetWorkflowExecutionHistory(getRequest)
        send_message('GetWorkflowExecutionHistory', GetWorkflowExecutionHistory_args, :getRequest => getRequest)
      end

      def recv_GetWorkflowExecutionHistory()
        result = receive_message(GetWorkflowExecutionHistory_result)
        return result.success unless result.success.nil?
        raise result.badRequestError unless result.badRequestError.nil?
        raise result.internalServiceError unless result.internalServiceError.nil?
        raise result.entityNotExistError unless result.entityNotExistError.nil?
        raise result.serviceBusyError unless result.serviceBusyError.nil?
        raise result.clientVersionNotSupportedError unless result.clientVersionNotSupportedError.nil?
        raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'GetWorkflowExecutionHistory failed: unknown result')
      end

      def PollForDecisionTask(pollRequest)
        send_PollForDecisionTask(pollRequest)
        return recv_PollForDecisionTask()
      end

      def send_PollForDecisionTask(pollRequest)
        send_message('PollForDecisionTask', PollForDecisionTask_args, :pollRequest => pollRequest)
      end

      def recv_PollForDecisionTask()
        result = receive_message(PollForDecisionTask_result)
        return result.success unless result.success.nil?
        raise result.badRequestError unless result.badRequestError.nil?
        raise result.internalServiceError unless result.internalServiceError.nil?
        raise result.serviceBusyError unless result.serviceBusyError.nil?
        raise result.limitExceededError unless result.limitExceededError.nil?
        raise result.entityNotExistError unless result.entityNotExistError.nil?
        raise result.domainNotActiveError unless result.domainNotActiveError.nil?
        raise result.clientVersionNotSupportedError unless result.clientVersionNotSupportedError.nil?
        raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'PollForDecisionTask failed: unknown result')
      end

      def RespondDecisionTaskCompleted(completeRequest)
        send_RespondDecisionTaskCompleted(completeRequest)
        return recv_RespondDecisionTaskCompleted()
      end

      def send_RespondDecisionTaskCompleted(completeRequest)
        send_message('RespondDecisionTaskCompleted', RespondDecisionTaskCompleted_args, :completeRequest => completeRequest)
      end

      def recv_RespondDecisionTaskCompleted()
        result = receive_message(RespondDecisionTaskCompleted_result)
        return result.success unless result.success.nil?
        raise result.badRequestError unless result.badRequestError.nil?
        raise result.internalServiceError unless result.internalServiceError.nil?
        raise result.entityNotExistError unless result.entityNotExistError.nil?
        raise result.domainNotActiveError unless result.domainNotActiveError.nil?
        raise result.limitExceededError unless result.limitExceededError.nil?
        raise result.serviceBusyError unless result.serviceBusyError.nil?
        raise result.clientVersionNotSupportedError unless result.clientVersionNotSupportedError.nil?
        raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'RespondDecisionTaskCompleted failed: unknown result')
      end

      def RespondDecisionTaskFailed(failedRequest)
        send_RespondDecisionTaskFailed(failedRequest)
        recv_RespondDecisionTaskFailed()
      end

      def send_RespondDecisionTaskFailed(failedRequest)
        send_message('RespondDecisionTaskFailed', RespondDecisionTaskFailed_args, :failedRequest => failedRequest)
      end

      def recv_RespondDecisionTaskFailed()
        result = receive_message(RespondDecisionTaskFailed_result)
        raise result.badRequestError unless result.badRequestError.nil?
        raise result.internalServiceError unless result.internalServiceError.nil?
        raise result.entityNotExistError unless result.entityNotExistError.nil?
        raise result.domainNotActiveError unless result.domainNotActiveError.nil?
        raise result.limitExceededError unless result.limitExceededError.nil?
        raise result.serviceBusyError unless result.serviceBusyError.nil?
        raise result.clientVersionNotSupportedError unless result.clientVersionNotSupportedError.nil?
        return
      end

      def PollForActivityTask(pollRequest)
        send_PollForActivityTask(pollRequest)
        return recv_PollForActivityTask()
      end

      def send_PollForActivityTask(pollRequest)
        send_message('PollForActivityTask', PollForActivityTask_args, :pollRequest => pollRequest)
      end

      def recv_PollForActivityTask()
        result = receive_message(PollForActivityTask_result)
        return result.success unless result.success.nil?
        raise result.badRequestError unless result.badRequestError.nil?
        raise result.internalServiceError unless result.internalServiceError.nil?
        raise result.serviceBusyError unless result.serviceBusyError.nil?
        raise result.limitExceededError unless result.limitExceededError.nil?
        raise result.entityNotExistError unless result.entityNotExistError.nil?
        raise result.domainNotActiveError unless result.domainNotActiveError.nil?
        raise result.clientVersionNotSupportedError unless result.clientVersionNotSupportedError.nil?
        raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'PollForActivityTask failed: unknown result')
      end

      def RecordActivityTaskHeartbeat(heartbeatRequest)
        send_RecordActivityTaskHeartbeat(heartbeatRequest)
        return recv_RecordActivityTaskHeartbeat()
      end

      def send_RecordActivityTaskHeartbeat(heartbeatRequest)
        send_message('RecordActivityTaskHeartbeat', RecordActivityTaskHeartbeat_args, :heartbeatRequest => heartbeatRequest)
      end

      def recv_RecordActivityTaskHeartbeat()
        result = receive_message(RecordActivityTaskHeartbeat_result)
        return result.success unless result.success.nil?
        raise result.badRequestError unless result.badRequestError.nil?
        raise result.internalServiceError unless result.internalServiceError.nil?
        raise result.entityNotExistError unless result.entityNotExistError.nil?
        raise result.domainNotActiveError unless result.domainNotActiveError.nil?
        raise result.limitExceededError unless result.limitExceededError.nil?
        raise result.serviceBusyError unless result.serviceBusyError.nil?
        raise result.clientVersionNotSupportedError unless result.clientVersionNotSupportedError.nil?
        raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'RecordActivityTaskHeartbeat failed: unknown result')
      end

      def RecordActivityTaskHeartbeatByID(heartbeatRequest)
        send_RecordActivityTaskHeartbeatByID(heartbeatRequest)
        return recv_RecordActivityTaskHeartbeatByID()
      end

      def send_RecordActivityTaskHeartbeatByID(heartbeatRequest)
        send_message('RecordActivityTaskHeartbeatByID', RecordActivityTaskHeartbeatByID_args, :heartbeatRequest => heartbeatRequest)
      end

      def recv_RecordActivityTaskHeartbeatByID()
        result = receive_message(RecordActivityTaskHeartbeatByID_result)
        return result.success unless result.success.nil?
        raise result.badRequestError unless result.badRequestError.nil?
        raise result.internalServiceError unless result.internalServiceError.nil?
        raise result.entityNotExistError unless result.entityNotExistError.nil?
        raise result.domainNotActiveError unless result.domainNotActiveError.nil?
        raise result.limitExceededError unless result.limitExceededError.nil?
        raise result.serviceBusyError unless result.serviceBusyError.nil?
        raise result.clientVersionNotSupportedError unless result.clientVersionNotSupportedError.nil?
        raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'RecordActivityTaskHeartbeatByID failed: unknown result')
      end

      def RespondActivityTaskCompleted(completeRequest)
        send_RespondActivityTaskCompleted(completeRequest)
        recv_RespondActivityTaskCompleted()
      end

      def send_RespondActivityTaskCompleted(completeRequest)
        send_message('RespondActivityTaskCompleted', RespondActivityTaskCompleted_args, :completeRequest => completeRequest)
      end

      def recv_RespondActivityTaskCompleted()
        result = receive_message(RespondActivityTaskCompleted_result)
        raise result.badRequestError unless result.badRequestError.nil?
        raise result.internalServiceError unless result.internalServiceError.nil?
        raise result.entityNotExistError unless result.entityNotExistError.nil?
        raise result.domainNotActiveError unless result.domainNotActiveError.nil?
        raise result.limitExceededError unless result.limitExceededError.nil?
        raise result.serviceBusyError unless result.serviceBusyError.nil?
        raise result.clientVersionNotSupportedError unless result.clientVersionNotSupportedError.nil?
        return
      end

      def RespondActivityTaskCompletedByID(completeRequest)
        send_RespondActivityTaskCompletedByID(completeRequest)
        recv_RespondActivityTaskCompletedByID()
      end

      def send_RespondActivityTaskCompletedByID(completeRequest)
        send_message('RespondActivityTaskCompletedByID', RespondActivityTaskCompletedByID_args, :completeRequest => completeRequest)
      end

      def recv_RespondActivityTaskCompletedByID()
        result = receive_message(RespondActivityTaskCompletedByID_result)
        raise result.badRequestError unless result.badRequestError.nil?
        raise result.internalServiceError unless result.internalServiceError.nil?
        raise result.entityNotExistError unless result.entityNotExistError.nil?
        raise result.domainNotActiveError unless result.domainNotActiveError.nil?
        raise result.limitExceededError unless result.limitExceededError.nil?
        raise result.serviceBusyError unless result.serviceBusyError.nil?
        raise result.clientVersionNotSupportedError unless result.clientVersionNotSupportedError.nil?
        return
      end

      def RespondActivityTaskFailed(failRequest)
        send_RespondActivityTaskFailed(failRequest)
        recv_RespondActivityTaskFailed()
      end

      def send_RespondActivityTaskFailed(failRequest)
        send_message('RespondActivityTaskFailed', RespondActivityTaskFailed_args, :failRequest => failRequest)
      end

      def recv_RespondActivityTaskFailed()
        result = receive_message(RespondActivityTaskFailed_result)
        raise result.badRequestError unless result.badRequestError.nil?
        raise result.internalServiceError unless result.internalServiceError.nil?
        raise result.entityNotExistError unless result.entityNotExistError.nil?
        raise result.domainNotActiveError unless result.domainNotActiveError.nil?
        raise result.limitExceededError unless result.limitExceededError.nil?
        raise result.serviceBusyError unless result.serviceBusyError.nil?
        raise result.clientVersionNotSupportedError unless result.clientVersionNotSupportedError.nil?
        return
      end

      def RespondActivityTaskFailedByID(failRequest)
        send_RespondActivityTaskFailedByID(failRequest)
        recv_RespondActivityTaskFailedByID()
      end

      def send_RespondActivityTaskFailedByID(failRequest)
        send_message('RespondActivityTaskFailedByID', RespondActivityTaskFailedByID_args, :failRequest => failRequest)
      end

      def recv_RespondActivityTaskFailedByID()
        result = receive_message(RespondActivityTaskFailedByID_result)
        raise result.badRequestError unless result.badRequestError.nil?
        raise result.internalServiceError unless result.internalServiceError.nil?
        raise result.entityNotExistError unless result.entityNotExistError.nil?
        raise result.domainNotActiveError unless result.domainNotActiveError.nil?
        raise result.limitExceededError unless result.limitExceededError.nil?
        raise result.serviceBusyError unless result.serviceBusyError.nil?
        raise result.clientVersionNotSupportedError unless result.clientVersionNotSupportedError.nil?
        return
      end

      def RespondActivityTaskCanceled(canceledRequest)
        send_RespondActivityTaskCanceled(canceledRequest)
        recv_RespondActivityTaskCanceled()
      end

      def send_RespondActivityTaskCanceled(canceledRequest)
        send_message('RespondActivityTaskCanceled', RespondActivityTaskCanceled_args, :canceledRequest => canceledRequest)
      end

      def recv_RespondActivityTaskCanceled()
        result = receive_message(RespondActivityTaskCanceled_result)
        raise result.badRequestError unless result.badRequestError.nil?
        raise result.internalServiceError unless result.internalServiceError.nil?
        raise result.entityNotExistError unless result.entityNotExistError.nil?
        raise result.domainNotActiveError unless result.domainNotActiveError.nil?
        raise result.limitExceededError unless result.limitExceededError.nil?
        raise result.serviceBusyError unless result.serviceBusyError.nil?
        raise result.clientVersionNotSupportedError unless result.clientVersionNotSupportedError.nil?
        return
      end

      def RespondActivityTaskCanceledByID(canceledRequest)
        send_RespondActivityTaskCanceledByID(canceledRequest)
        recv_RespondActivityTaskCanceledByID()
      end

      def send_RespondActivityTaskCanceledByID(canceledRequest)
        send_message('RespondActivityTaskCanceledByID', RespondActivityTaskCanceledByID_args, :canceledRequest => canceledRequest)
      end

      def recv_RespondActivityTaskCanceledByID()
        result = receive_message(RespondActivityTaskCanceledByID_result)
        raise result.badRequestError unless result.badRequestError.nil?
        raise result.internalServiceError unless result.internalServiceError.nil?
        raise result.entityNotExistError unless result.entityNotExistError.nil?
        raise result.domainNotActiveError unless result.domainNotActiveError.nil?
        raise result.limitExceededError unless result.limitExceededError.nil?
        raise result.serviceBusyError unless result.serviceBusyError.nil?
        raise result.clientVersionNotSupportedError unless result.clientVersionNotSupportedError.nil?
        return
      end

      def RequestCancelWorkflowExecution(cancelRequest)
        send_RequestCancelWorkflowExecution(cancelRequest)
        recv_RequestCancelWorkflowExecution()
      end

      def send_RequestCancelWorkflowExecution(cancelRequest)
        send_message('RequestCancelWorkflowExecution', RequestCancelWorkflowExecution_args, :cancelRequest => cancelRequest)
      end

      def recv_RequestCancelWorkflowExecution()
        result = receive_message(RequestCancelWorkflowExecution_result)
        raise result.badRequestError unless result.badRequestError.nil?
        raise result.internalServiceError unless result.internalServiceError.nil?
        raise result.entityNotExistError unless result.entityNotExistError.nil?
        raise result.cancellationAlreadyRequestedError unless result.cancellationAlreadyRequestedError.nil?
        raise result.serviceBusyError unless result.serviceBusyError.nil?
        raise result.domainNotActiveError unless result.domainNotActiveError.nil?
        raise result.limitExceededError unless result.limitExceededError.nil?
        raise result.clientVersionNotSupportedError unless result.clientVersionNotSupportedError.nil?
        return
      end

      def SignalWorkflowExecution(signalRequest)
        send_SignalWorkflowExecution(signalRequest)
        recv_SignalWorkflowExecution()
      end

      def send_SignalWorkflowExecution(signalRequest)
        send_message('SignalWorkflowExecution', SignalWorkflowExecution_args, :signalRequest => signalRequest)
      end

      def recv_SignalWorkflowExecution()
        result = receive_message(SignalWorkflowExecution_result)
        raise result.badRequestError unless result.badRequestError.nil?
        raise result.internalServiceError unless result.internalServiceError.nil?
        raise result.entityNotExistError unless result.entityNotExistError.nil?
        raise result.serviceBusyError unless result.serviceBusyError.nil?
        raise result.domainNotActiveError unless result.domainNotActiveError.nil?
        raise result.limitExceededError unless result.limitExceededError.nil?
        raise result.clientVersionNotSupportedError unless result.clientVersionNotSupportedError.nil?
        return
      end

      def SignalWithStartWorkflowExecution(signalWithStartRequest)
        send_SignalWithStartWorkflowExecution(signalWithStartRequest)
        return recv_SignalWithStartWorkflowExecution()
      end

      def send_SignalWithStartWorkflowExecution(signalWithStartRequest)
        send_message('SignalWithStartWorkflowExecution', SignalWithStartWorkflowExecution_args, :signalWithStartRequest => signalWithStartRequest)
      end

      def recv_SignalWithStartWorkflowExecution()
        result = receive_message(SignalWithStartWorkflowExecution_result)
        return result.success unless result.success.nil?
        raise result.badRequestError unless result.badRequestError.nil?
        raise result.internalServiceError unless result.internalServiceError.nil?
        raise result.entityNotExistError unless result.entityNotExistError.nil?
        raise result.serviceBusyError unless result.serviceBusyError.nil?
        raise result.domainNotActiveError unless result.domainNotActiveError.nil?
        raise result.limitExceededError unless result.limitExceededError.nil?
        raise result.workflowAlreadyStartedError unless result.workflowAlreadyStartedError.nil?
        raise result.clientVersionNotSupportedError unless result.clientVersionNotSupportedError.nil?
        raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'SignalWithStartWorkflowExecution failed: unknown result')
      end

      def ResetWorkflowExecution(resetRequest)
        send_ResetWorkflowExecution(resetRequest)
        return recv_ResetWorkflowExecution()
      end

      def send_ResetWorkflowExecution(resetRequest)
        send_message('ResetWorkflowExecution', ResetWorkflowExecution_args, :resetRequest => resetRequest)
      end

      def recv_ResetWorkflowExecution()
        result = receive_message(ResetWorkflowExecution_result)
        return result.success unless result.success.nil?
        raise result.badRequestError unless result.badRequestError.nil?
        raise result.internalServiceError unless result.internalServiceError.nil?
        raise result.entityNotExistError unless result.entityNotExistError.nil?
        raise result.serviceBusyError unless result.serviceBusyError.nil?
        raise result.domainNotActiveError unless result.domainNotActiveError.nil?
        raise result.limitExceededError unless result.limitExceededError.nil?
        raise result.clientVersionNotSupportedError unless result.clientVersionNotSupportedError.nil?
        raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'ResetWorkflowExecution failed: unknown result')
      end

      def TerminateWorkflowExecution(terminateRequest)
        send_TerminateWorkflowExecution(terminateRequest)
        recv_TerminateWorkflowExecution()
      end

      def send_TerminateWorkflowExecution(terminateRequest)
        send_message('TerminateWorkflowExecution', TerminateWorkflowExecution_args, :terminateRequest => terminateRequest)
      end

      def recv_TerminateWorkflowExecution()
        result = receive_message(TerminateWorkflowExecution_result)
        raise result.badRequestError unless result.badRequestError.nil?
        raise result.internalServiceError unless result.internalServiceError.nil?
        raise result.entityNotExistError unless result.entityNotExistError.nil?
        raise result.serviceBusyError unless result.serviceBusyError.nil?
        raise result.domainNotActiveError unless result.domainNotActiveError.nil?
        raise result.limitExceededError unless result.limitExceededError.nil?
        raise result.clientVersionNotSupportedError unless result.clientVersionNotSupportedError.nil?
        return
      end

      def ListOpenWorkflowExecutions(listRequest)
        send_ListOpenWorkflowExecutions(listRequest)
        return recv_ListOpenWorkflowExecutions()
      end

      def send_ListOpenWorkflowExecutions(listRequest)
        send_message('ListOpenWorkflowExecutions', ListOpenWorkflowExecutions_args, :listRequest => listRequest)
      end

      def recv_ListOpenWorkflowExecutions()
        result = receive_message(ListOpenWorkflowExecutions_result)
        return result.success unless result.success.nil?
        raise result.badRequestError unless result.badRequestError.nil?
        raise result.internalServiceError unless result.internalServiceError.nil?
        raise result.entityNotExistError unless result.entityNotExistError.nil?
        raise result.serviceBusyError unless result.serviceBusyError.nil?
        raise result.limitExceededError unless result.limitExceededError.nil?
        raise result.clientVersionNotSupportedError unless result.clientVersionNotSupportedError.nil?
        raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'ListOpenWorkflowExecutions failed: unknown result')
      end

      def ListClosedWorkflowExecutions(listRequest)
        send_ListClosedWorkflowExecutions(listRequest)
        return recv_ListClosedWorkflowExecutions()
      end

      def send_ListClosedWorkflowExecutions(listRequest)
        send_message('ListClosedWorkflowExecutions', ListClosedWorkflowExecutions_args, :listRequest => listRequest)
      end

      def recv_ListClosedWorkflowExecutions()
        result = receive_message(ListClosedWorkflowExecutions_result)
        return result.success unless result.success.nil?
        raise result.badRequestError unless result.badRequestError.nil?
        raise result.internalServiceError unless result.internalServiceError.nil?
        raise result.entityNotExistError unless result.entityNotExistError.nil?
        raise result.serviceBusyError unless result.serviceBusyError.nil?
        raise result.clientVersionNotSupportedError unless result.clientVersionNotSupportedError.nil?
        raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'ListClosedWorkflowExecutions failed: unknown result')
      end

      def ListWorkflowExecutions(listRequest)
        send_ListWorkflowExecutions(listRequest)
        return recv_ListWorkflowExecutions()
      end

      def send_ListWorkflowExecutions(listRequest)
        send_message('ListWorkflowExecutions', ListWorkflowExecutions_args, :listRequest => listRequest)
      end

      def recv_ListWorkflowExecutions()
        result = receive_message(ListWorkflowExecutions_result)
        return result.success unless result.success.nil?
        raise result.badRequestError unless result.badRequestError.nil?
        raise result.internalServiceError unless result.internalServiceError.nil?
        raise result.entityNotExistError unless result.entityNotExistError.nil?
        raise result.serviceBusyError unless result.serviceBusyError.nil?
        raise result.clientVersionNotSupportedError unless result.clientVersionNotSupportedError.nil?
        raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'ListWorkflowExecutions failed: unknown result')
      end

      def ListArchivedWorkflowExecutions(listRequest)
        send_ListArchivedWorkflowExecutions(listRequest)
        return recv_ListArchivedWorkflowExecutions()
      end

      def send_ListArchivedWorkflowExecutions(listRequest)
        send_message('ListArchivedWorkflowExecutions', ListArchivedWorkflowExecutions_args, :listRequest => listRequest)
      end

      def recv_ListArchivedWorkflowExecutions()
        result = receive_message(ListArchivedWorkflowExecutions_result)
        return result.success unless result.success.nil?
        raise result.badRequestError unless result.badRequestError.nil?
        raise result.internalServiceError unless result.internalServiceError.nil?
        raise result.entityNotExistError unless result.entityNotExistError.nil?
        raise result.serviceBusyError unless result.serviceBusyError.nil?
        raise result.clientVersionNotSupportedError unless result.clientVersionNotSupportedError.nil?
        raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'ListArchivedWorkflowExecutions failed: unknown result')
      end

      def ScanWorkflowExecutions(listRequest)
        send_ScanWorkflowExecutions(listRequest)
        return recv_ScanWorkflowExecutions()
      end

      def send_ScanWorkflowExecutions(listRequest)
        send_message('ScanWorkflowExecutions', ScanWorkflowExecutions_args, :listRequest => listRequest)
      end

      def recv_ScanWorkflowExecutions()
        result = receive_message(ScanWorkflowExecutions_result)
        return result.success unless result.success.nil?
        raise result.badRequestError unless result.badRequestError.nil?
        raise result.internalServiceError unless result.internalServiceError.nil?
        raise result.entityNotExistError unless result.entityNotExistError.nil?
        raise result.serviceBusyError unless result.serviceBusyError.nil?
        raise result.clientVersionNotSupportedError unless result.clientVersionNotSupportedError.nil?
        raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'ScanWorkflowExecutions failed: unknown result')
      end

      def CountWorkflowExecutions(countRequest)
        send_CountWorkflowExecutions(countRequest)
        return recv_CountWorkflowExecutions()
      end

      def send_CountWorkflowExecutions(countRequest)
        send_message('CountWorkflowExecutions', CountWorkflowExecutions_args, :countRequest => countRequest)
      end

      def recv_CountWorkflowExecutions()
        result = receive_message(CountWorkflowExecutions_result)
        return result.success unless result.success.nil?
        raise result.badRequestError unless result.badRequestError.nil?
        raise result.internalServiceError unless result.internalServiceError.nil?
        raise result.entityNotExistError unless result.entityNotExistError.nil?
        raise result.serviceBusyError unless result.serviceBusyError.nil?
        raise result.clientVersionNotSupportedError unless result.clientVersionNotSupportedError.nil?
        raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'CountWorkflowExecutions failed: unknown result')
      end

      def GetSearchAttributes()
        send_GetSearchAttributes()
        return recv_GetSearchAttributes()
      end

      def send_GetSearchAttributes()
        send_message('GetSearchAttributes', GetSearchAttributes_args)
      end

      def recv_GetSearchAttributes()
        result = receive_message(GetSearchAttributes_result)
        return result.success unless result.success.nil?
        raise result.internalServiceError unless result.internalServiceError.nil?
        raise result.serviceBusyError unless result.serviceBusyError.nil?
        raise result.clientVersionNotSupportedError unless result.clientVersionNotSupportedError.nil?
        raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'GetSearchAttributes failed: unknown result')
      end

      def RespondQueryTaskCompleted(completeRequest)
        send_RespondQueryTaskCompleted(completeRequest)
        recv_RespondQueryTaskCompleted()
      end

      def send_RespondQueryTaskCompleted(completeRequest)
        send_message('RespondQueryTaskCompleted', RespondQueryTaskCompleted_args, :completeRequest => completeRequest)
      end

      def recv_RespondQueryTaskCompleted()
        result = receive_message(RespondQueryTaskCompleted_result)
        raise result.badRequestError unless result.badRequestError.nil?
        raise result.internalServiceError unless result.internalServiceError.nil?
        raise result.entityNotExistError unless result.entityNotExistError.nil?
        raise result.limitExceededError unless result.limitExceededError.nil?
        raise result.serviceBusyError unless result.serviceBusyError.nil?
        raise result.domainNotActiveError unless result.domainNotActiveError.nil?
        raise result.clientVersionNotSupportedError unless result.clientVersionNotSupportedError.nil?
        return
      end

      def ResetStickyTaskList(resetRequest)
        send_ResetStickyTaskList(resetRequest)
        return recv_ResetStickyTaskList()
      end

      def send_ResetStickyTaskList(resetRequest)
        send_message('ResetStickyTaskList', ResetStickyTaskList_args, :resetRequest => resetRequest)
      end

      def recv_ResetStickyTaskList()
        result = receive_message(ResetStickyTaskList_result)
        return result.success unless result.success.nil?
        raise result.badRequestError unless result.badRequestError.nil?
        raise result.internalServiceError unless result.internalServiceError.nil?
        raise result.entityNotExistError unless result.entityNotExistError.nil?
        raise result.limitExceededError unless result.limitExceededError.nil?
        raise result.serviceBusyError unless result.serviceBusyError.nil?
        raise result.domainNotActiveError unless result.domainNotActiveError.nil?
        raise result.clientVersionNotSupportedError unless result.clientVersionNotSupportedError.nil?
        raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'ResetStickyTaskList failed: unknown result')
      end

      def QueryWorkflow(queryRequest)
        send_QueryWorkflow(queryRequest)
        return recv_QueryWorkflow()
      end

      def send_QueryWorkflow(queryRequest)
        send_message('QueryWorkflow', QueryWorkflow_args, :queryRequest => queryRequest)
      end

      def recv_QueryWorkflow()
        result = receive_message(QueryWorkflow_result)
        return result.success unless result.success.nil?
        raise result.badRequestError unless result.badRequestError.nil?
        raise result.internalServiceError unless result.internalServiceError.nil?
        raise result.entityNotExistError unless result.entityNotExistError.nil?
        raise result.queryFailedError unless result.queryFailedError.nil?
        raise result.limitExceededError unless result.limitExceededError.nil?
        raise result.serviceBusyError unless result.serviceBusyError.nil?
        raise result.clientVersionNotSupportedError unless result.clientVersionNotSupportedError.nil?
        raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'QueryWorkflow failed: unknown result')
      end

      def DescribeWorkflowExecution(describeRequest)
        send_DescribeWorkflowExecution(describeRequest)
        return recv_DescribeWorkflowExecution()
      end

      def send_DescribeWorkflowExecution(describeRequest)
        send_message('DescribeWorkflowExecution', DescribeWorkflowExecution_args, :describeRequest => describeRequest)
      end

      def recv_DescribeWorkflowExecution()
        result = receive_message(DescribeWorkflowExecution_result)
        return result.success unless result.success.nil?
        raise result.badRequestError unless result.badRequestError.nil?
        raise result.internalServiceError unless result.internalServiceError.nil?
        raise result.entityNotExistError unless result.entityNotExistError.nil?
        raise result.limitExceededError unless result.limitExceededError.nil?
        raise result.serviceBusyError unless result.serviceBusyError.nil?
        raise result.clientVersionNotSupportedError unless result.clientVersionNotSupportedError.nil?
        raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'DescribeWorkflowExecution failed: unknown result')
      end

      def DescribeTaskList(request)
        send_DescribeTaskList(request)
        return recv_DescribeTaskList()
      end

      def send_DescribeTaskList(request)
        send_message('DescribeTaskList', DescribeTaskList_args, :request => request)
      end

      def recv_DescribeTaskList()
        result = receive_message(DescribeTaskList_result)
        return result.success unless result.success.nil?
        raise result.badRequestError unless result.badRequestError.nil?
        raise result.internalServiceError unless result.internalServiceError.nil?
        raise result.entityNotExistError unless result.entityNotExistError.nil?
        raise result.limitExceededError unless result.limitExceededError.nil?
        raise result.serviceBusyError unless result.serviceBusyError.nil?
        raise result.clientVersionNotSupportedError unless result.clientVersionNotSupportedError.nil?
        raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'DescribeTaskList failed: unknown result')
      end

    end

    class Processor
      include ::Thrift::Processor

      def process_RegisterDomain(seqid, iprot, oprot)
        args = read_args(iprot, RegisterDomain_args)
        result = RegisterDomain_result.new()
        begin
          @handler.RegisterDomain(args.registerRequest)
        rescue ::CadenceThrift::BadRequestError => badRequestError
          result.badRequestError = badRequestError
        rescue ::CadenceThrift::InternalServiceError => internalServiceError
          result.internalServiceError = internalServiceError
        rescue ::CadenceThrift::DomainAlreadyExistsError => domainExistsError
          result.domainExistsError = domainExistsError
        rescue ::CadenceThrift::ServiceBusyError => serviceBusyError
          result.serviceBusyError = serviceBusyError
        rescue ::CadenceThrift::ClientVersionNotSupportedError => clientVersionNotSupportedError
          result.clientVersionNotSupportedError = clientVersionNotSupportedError
        end
        write_result(result, oprot, 'RegisterDomain', seqid)
      end

      def process_DescribeDomain(seqid, iprot, oprot)
        args = read_args(iprot, DescribeDomain_args)
        result = DescribeDomain_result.new()
        begin
          result.success = @handler.DescribeDomain(args.describeRequest)
        rescue ::CadenceThrift::BadRequestError => badRequestError
          result.badRequestError = badRequestError
        rescue ::CadenceThrift::InternalServiceError => internalServiceError
          result.internalServiceError = internalServiceError
        rescue ::CadenceThrift::EntityNotExistsError => entityNotExistError
          result.entityNotExistError = entityNotExistError
        rescue ::CadenceThrift::ServiceBusyError => serviceBusyError
          result.serviceBusyError = serviceBusyError
        rescue ::CadenceThrift::ClientVersionNotSupportedError => clientVersionNotSupportedError
          result.clientVersionNotSupportedError = clientVersionNotSupportedError
        end
        write_result(result, oprot, 'DescribeDomain', seqid)
      end

      def process_ListDomains(seqid, iprot, oprot)
        args = read_args(iprot, ListDomains_args)
        result = ListDomains_result.new()
        begin
          result.success = @handler.ListDomains(args.listRequest)
        rescue ::CadenceThrift::BadRequestError => badRequestError
          result.badRequestError = badRequestError
        rescue ::CadenceThrift::InternalServiceError => internalServiceError
          result.internalServiceError = internalServiceError
        rescue ::CadenceThrift::EntityNotExistsError => entityNotExistError
          result.entityNotExistError = entityNotExistError
        rescue ::CadenceThrift::ServiceBusyError => serviceBusyError
          result.serviceBusyError = serviceBusyError
        rescue ::CadenceThrift::ClientVersionNotSupportedError => clientVersionNotSupportedError
          result.clientVersionNotSupportedError = clientVersionNotSupportedError
        end
        write_result(result, oprot, 'ListDomains', seqid)
      end

      def process_UpdateDomain(seqid, iprot, oprot)
        args = read_args(iprot, UpdateDomain_args)
        result = UpdateDomain_result.new()
        begin
          result.success = @handler.UpdateDomain(args.updateRequest)
        rescue ::CadenceThrift::BadRequestError => badRequestError
          result.badRequestError = badRequestError
        rescue ::CadenceThrift::InternalServiceError => internalServiceError
          result.internalServiceError = internalServiceError
        rescue ::CadenceThrift::EntityNotExistsError => entityNotExistError
          result.entityNotExistError = entityNotExistError
        rescue ::CadenceThrift::ServiceBusyError => serviceBusyError
          result.serviceBusyError = serviceBusyError
        rescue ::CadenceThrift::DomainNotActiveError => domainNotActiveError
          result.domainNotActiveError = domainNotActiveError
        rescue ::CadenceThrift::ClientVersionNotSupportedError => clientVersionNotSupportedError
          result.clientVersionNotSupportedError = clientVersionNotSupportedError
        end
        write_result(result, oprot, 'UpdateDomain', seqid)
      end

      def process_DeprecateDomain(seqid, iprot, oprot)
        args = read_args(iprot, DeprecateDomain_args)
        result = DeprecateDomain_result.new()
        begin
          @handler.DeprecateDomain(args.deprecateRequest)
        rescue ::CadenceThrift::BadRequestError => badRequestError
          result.badRequestError = badRequestError
        rescue ::CadenceThrift::InternalServiceError => internalServiceError
          result.internalServiceError = internalServiceError
        rescue ::CadenceThrift::EntityNotExistsError => entityNotExistError
          result.entityNotExistError = entityNotExistError
        rescue ::CadenceThrift::ServiceBusyError => serviceBusyError
          result.serviceBusyError = serviceBusyError
        rescue ::CadenceThrift::DomainNotActiveError => domainNotActiveError
          result.domainNotActiveError = domainNotActiveError
        rescue ::CadenceThrift::ClientVersionNotSupportedError => clientVersionNotSupportedError
          result.clientVersionNotSupportedError = clientVersionNotSupportedError
        end
        write_result(result, oprot, 'DeprecateDomain', seqid)
      end

      def process_StartWorkflowExecution(seqid, iprot, oprot)
        args = read_args(iprot, StartWorkflowExecution_args)
        result = StartWorkflowExecution_result.new()
        begin
          result.success = @handler.StartWorkflowExecution(args.startRequest)
        rescue ::CadenceThrift::BadRequestError => badRequestError
          result.badRequestError = badRequestError
        rescue ::CadenceThrift::InternalServiceError => internalServiceError
          result.internalServiceError = internalServiceError
        rescue ::CadenceThrift::WorkflowExecutionAlreadyStartedError => sessionAlreadyExistError
          result.sessionAlreadyExistError = sessionAlreadyExistError
        rescue ::CadenceThrift::ServiceBusyError => serviceBusyError
          result.serviceBusyError = serviceBusyError
        rescue ::CadenceThrift::DomainNotActiveError => domainNotActiveError
          result.domainNotActiveError = domainNotActiveError
        rescue ::CadenceThrift::LimitExceededError => limitExceededError
          result.limitExceededError = limitExceededError
        rescue ::CadenceThrift::EntityNotExistsError => entityNotExistError
          result.entityNotExistError = entityNotExistError
        rescue ::CadenceThrift::ClientVersionNotSupportedError => clientVersionNotSupportedError
          result.clientVersionNotSupportedError = clientVersionNotSupportedError
        end
        write_result(result, oprot, 'StartWorkflowExecution', seqid)
      end

      def process_GetWorkflowExecutionHistory(seqid, iprot, oprot)
        args = read_args(iprot, GetWorkflowExecutionHistory_args)
        result = GetWorkflowExecutionHistory_result.new()
        begin
          result.success = @handler.GetWorkflowExecutionHistory(args.getRequest)
        rescue ::CadenceThrift::BadRequestError => badRequestError
          result.badRequestError = badRequestError
        rescue ::CadenceThrift::InternalServiceError => internalServiceError
          result.internalServiceError = internalServiceError
        rescue ::CadenceThrift::EntityNotExistsError => entityNotExistError
          result.entityNotExistError = entityNotExistError
        rescue ::CadenceThrift::ServiceBusyError => serviceBusyError
          result.serviceBusyError = serviceBusyError
        rescue ::CadenceThrift::ClientVersionNotSupportedError => clientVersionNotSupportedError
          result.clientVersionNotSupportedError = clientVersionNotSupportedError
        end
        write_result(result, oprot, 'GetWorkflowExecutionHistory', seqid)
      end

      def process_PollForDecisionTask(seqid, iprot, oprot)
        args = read_args(iprot, PollForDecisionTask_args)
        result = PollForDecisionTask_result.new()
        begin
          result.success = @handler.PollForDecisionTask(args.pollRequest)
        rescue ::CadenceThrift::BadRequestError => badRequestError
          result.badRequestError = badRequestError
        rescue ::CadenceThrift::InternalServiceError => internalServiceError
          result.internalServiceError = internalServiceError
        rescue ::CadenceThrift::ServiceBusyError => serviceBusyError
          result.serviceBusyError = serviceBusyError
        rescue ::CadenceThrift::LimitExceededError => limitExceededError
          result.limitExceededError = limitExceededError
        rescue ::CadenceThrift::EntityNotExistsError => entityNotExistError
          result.entityNotExistError = entityNotExistError
        rescue ::CadenceThrift::DomainNotActiveError => domainNotActiveError
          result.domainNotActiveError = domainNotActiveError
        rescue ::CadenceThrift::ClientVersionNotSupportedError => clientVersionNotSupportedError
          result.clientVersionNotSupportedError = clientVersionNotSupportedError
        end
        write_result(result, oprot, 'PollForDecisionTask', seqid)
      end

      def process_RespondDecisionTaskCompleted(seqid, iprot, oprot)
        args = read_args(iprot, RespondDecisionTaskCompleted_args)
        result = RespondDecisionTaskCompleted_result.new()
        begin
          result.success = @handler.RespondDecisionTaskCompleted(args.completeRequest)
        rescue ::CadenceThrift::BadRequestError => badRequestError
          result.badRequestError = badRequestError
        rescue ::CadenceThrift::InternalServiceError => internalServiceError
          result.internalServiceError = internalServiceError
        rescue ::CadenceThrift::EntityNotExistsError => entityNotExistError
          result.entityNotExistError = entityNotExistError
        rescue ::CadenceThrift::DomainNotActiveError => domainNotActiveError
          result.domainNotActiveError = domainNotActiveError
        rescue ::CadenceThrift::LimitExceededError => limitExceededError
          result.limitExceededError = limitExceededError
        rescue ::CadenceThrift::ServiceBusyError => serviceBusyError
          result.serviceBusyError = serviceBusyError
        rescue ::CadenceThrift::ClientVersionNotSupportedError => clientVersionNotSupportedError
          result.clientVersionNotSupportedError = clientVersionNotSupportedError
        end
        write_result(result, oprot, 'RespondDecisionTaskCompleted', seqid)
      end

      def process_RespondDecisionTaskFailed(seqid, iprot, oprot)
        args = read_args(iprot, RespondDecisionTaskFailed_args)
        result = RespondDecisionTaskFailed_result.new()
        begin
          @handler.RespondDecisionTaskFailed(args.failedRequest)
        rescue ::CadenceThrift::BadRequestError => badRequestError
          result.badRequestError = badRequestError
        rescue ::CadenceThrift::InternalServiceError => internalServiceError
          result.internalServiceError = internalServiceError
        rescue ::CadenceThrift::EntityNotExistsError => entityNotExistError
          result.entityNotExistError = entityNotExistError
        rescue ::CadenceThrift::DomainNotActiveError => domainNotActiveError
          result.domainNotActiveError = domainNotActiveError
        rescue ::CadenceThrift::LimitExceededError => limitExceededError
          result.limitExceededError = limitExceededError
        rescue ::CadenceThrift::ServiceBusyError => serviceBusyError
          result.serviceBusyError = serviceBusyError
        rescue ::CadenceThrift::ClientVersionNotSupportedError => clientVersionNotSupportedError
          result.clientVersionNotSupportedError = clientVersionNotSupportedError
        end
        write_result(result, oprot, 'RespondDecisionTaskFailed', seqid)
      end

      def process_PollForActivityTask(seqid, iprot, oprot)
        args = read_args(iprot, PollForActivityTask_args)
        result = PollForActivityTask_result.new()
        begin
          result.success = @handler.PollForActivityTask(args.pollRequest)
        rescue ::CadenceThrift::BadRequestError => badRequestError
          result.badRequestError = badRequestError
        rescue ::CadenceThrift::InternalServiceError => internalServiceError
          result.internalServiceError = internalServiceError
        rescue ::CadenceThrift::ServiceBusyError => serviceBusyError
          result.serviceBusyError = serviceBusyError
        rescue ::CadenceThrift::LimitExceededError => limitExceededError
          result.limitExceededError = limitExceededError
        rescue ::CadenceThrift::EntityNotExistsError => entityNotExistError
          result.entityNotExistError = entityNotExistError
        rescue ::CadenceThrift::DomainNotActiveError => domainNotActiveError
          result.domainNotActiveError = domainNotActiveError
        rescue ::CadenceThrift::ClientVersionNotSupportedError => clientVersionNotSupportedError
          result.clientVersionNotSupportedError = clientVersionNotSupportedError
        end
        write_result(result, oprot, 'PollForActivityTask', seqid)
      end

      def process_RecordActivityTaskHeartbeat(seqid, iprot, oprot)
        args = read_args(iprot, RecordActivityTaskHeartbeat_args)
        result = RecordActivityTaskHeartbeat_result.new()
        begin
          result.success = @handler.RecordActivityTaskHeartbeat(args.heartbeatRequest)
        rescue ::CadenceThrift::BadRequestError => badRequestError
          result.badRequestError = badRequestError
        rescue ::CadenceThrift::InternalServiceError => internalServiceError
          result.internalServiceError = internalServiceError
        rescue ::CadenceThrift::EntityNotExistsError => entityNotExistError
          result.entityNotExistError = entityNotExistError
        rescue ::CadenceThrift::DomainNotActiveError => domainNotActiveError
          result.domainNotActiveError = domainNotActiveError
        rescue ::CadenceThrift::LimitExceededError => limitExceededError
          result.limitExceededError = limitExceededError
        rescue ::CadenceThrift::ServiceBusyError => serviceBusyError
          result.serviceBusyError = serviceBusyError
        rescue ::CadenceThrift::ClientVersionNotSupportedError => clientVersionNotSupportedError
          result.clientVersionNotSupportedError = clientVersionNotSupportedError
        end
        write_result(result, oprot, 'RecordActivityTaskHeartbeat', seqid)
      end

      def process_RecordActivityTaskHeartbeatByID(seqid, iprot, oprot)
        args = read_args(iprot, RecordActivityTaskHeartbeatByID_args)
        result = RecordActivityTaskHeartbeatByID_result.new()
        begin
          result.success = @handler.RecordActivityTaskHeartbeatByID(args.heartbeatRequest)
        rescue ::CadenceThrift::BadRequestError => badRequestError
          result.badRequestError = badRequestError
        rescue ::CadenceThrift::InternalServiceError => internalServiceError
          result.internalServiceError = internalServiceError
        rescue ::CadenceThrift::EntityNotExistsError => entityNotExistError
          result.entityNotExistError = entityNotExistError
        rescue ::CadenceThrift::DomainNotActiveError => domainNotActiveError
          result.domainNotActiveError = domainNotActiveError
        rescue ::CadenceThrift::LimitExceededError => limitExceededError
          result.limitExceededError = limitExceededError
        rescue ::CadenceThrift::ServiceBusyError => serviceBusyError
          result.serviceBusyError = serviceBusyError
        rescue ::CadenceThrift::ClientVersionNotSupportedError => clientVersionNotSupportedError
          result.clientVersionNotSupportedError = clientVersionNotSupportedError
        end
        write_result(result, oprot, 'RecordActivityTaskHeartbeatByID', seqid)
      end

      def process_RespondActivityTaskCompleted(seqid, iprot, oprot)
        args = read_args(iprot, RespondActivityTaskCompleted_args)
        result = RespondActivityTaskCompleted_result.new()
        begin
          @handler.RespondActivityTaskCompleted(args.completeRequest)
        rescue ::CadenceThrift::BadRequestError => badRequestError
          result.badRequestError = badRequestError
        rescue ::CadenceThrift::InternalServiceError => internalServiceError
          result.internalServiceError = internalServiceError
        rescue ::CadenceThrift::EntityNotExistsError => entityNotExistError
          result.entityNotExistError = entityNotExistError
        rescue ::CadenceThrift::DomainNotActiveError => domainNotActiveError
          result.domainNotActiveError = domainNotActiveError
        rescue ::CadenceThrift::LimitExceededError => limitExceededError
          result.limitExceededError = limitExceededError
        rescue ::CadenceThrift::ServiceBusyError => serviceBusyError
          result.serviceBusyError = serviceBusyError
        rescue ::CadenceThrift::ClientVersionNotSupportedError => clientVersionNotSupportedError
          result.clientVersionNotSupportedError = clientVersionNotSupportedError
        end
        write_result(result, oprot, 'RespondActivityTaskCompleted', seqid)
      end

      def process_RespondActivityTaskCompletedByID(seqid, iprot, oprot)
        args = read_args(iprot, RespondActivityTaskCompletedByID_args)
        result = RespondActivityTaskCompletedByID_result.new()
        begin
          @handler.RespondActivityTaskCompletedByID(args.completeRequest)
        rescue ::CadenceThrift::BadRequestError => badRequestError
          result.badRequestError = badRequestError
        rescue ::CadenceThrift::InternalServiceError => internalServiceError
          result.internalServiceError = internalServiceError
        rescue ::CadenceThrift::EntityNotExistsError => entityNotExistError
          result.entityNotExistError = entityNotExistError
        rescue ::CadenceThrift::DomainNotActiveError => domainNotActiveError
          result.domainNotActiveError = domainNotActiveError
        rescue ::CadenceThrift::LimitExceededError => limitExceededError
          result.limitExceededError = limitExceededError
        rescue ::CadenceThrift::ServiceBusyError => serviceBusyError
          result.serviceBusyError = serviceBusyError
        rescue ::CadenceThrift::ClientVersionNotSupportedError => clientVersionNotSupportedError
          result.clientVersionNotSupportedError = clientVersionNotSupportedError
        end
        write_result(result, oprot, 'RespondActivityTaskCompletedByID', seqid)
      end

      def process_RespondActivityTaskFailed(seqid, iprot, oprot)
        args = read_args(iprot, RespondActivityTaskFailed_args)
        result = RespondActivityTaskFailed_result.new()
        begin
          @handler.RespondActivityTaskFailed(args.failRequest)
        rescue ::CadenceThrift::BadRequestError => badRequestError
          result.badRequestError = badRequestError
        rescue ::CadenceThrift::InternalServiceError => internalServiceError
          result.internalServiceError = internalServiceError
        rescue ::CadenceThrift::EntityNotExistsError => entityNotExistError
          result.entityNotExistError = entityNotExistError
        rescue ::CadenceThrift::DomainNotActiveError => domainNotActiveError
          result.domainNotActiveError = domainNotActiveError
        rescue ::CadenceThrift::LimitExceededError => limitExceededError
          result.limitExceededError = limitExceededError
        rescue ::CadenceThrift::ServiceBusyError => serviceBusyError
          result.serviceBusyError = serviceBusyError
        rescue ::CadenceThrift::ClientVersionNotSupportedError => clientVersionNotSupportedError
          result.clientVersionNotSupportedError = clientVersionNotSupportedError
        end
        write_result(result, oprot, 'RespondActivityTaskFailed', seqid)
      end

      def process_RespondActivityTaskFailedByID(seqid, iprot, oprot)
        args = read_args(iprot, RespondActivityTaskFailedByID_args)
        result = RespondActivityTaskFailedByID_result.new()
        begin
          @handler.RespondActivityTaskFailedByID(args.failRequest)
        rescue ::CadenceThrift::BadRequestError => badRequestError
          result.badRequestError = badRequestError
        rescue ::CadenceThrift::InternalServiceError => internalServiceError
          result.internalServiceError = internalServiceError
        rescue ::CadenceThrift::EntityNotExistsError => entityNotExistError
          result.entityNotExistError = entityNotExistError
        rescue ::CadenceThrift::DomainNotActiveError => domainNotActiveError
          result.domainNotActiveError = domainNotActiveError
        rescue ::CadenceThrift::LimitExceededError => limitExceededError
          result.limitExceededError = limitExceededError
        rescue ::CadenceThrift::ServiceBusyError => serviceBusyError
          result.serviceBusyError = serviceBusyError
        rescue ::CadenceThrift::ClientVersionNotSupportedError => clientVersionNotSupportedError
          result.clientVersionNotSupportedError = clientVersionNotSupportedError
        end
        write_result(result, oprot, 'RespondActivityTaskFailedByID', seqid)
      end

      def process_RespondActivityTaskCanceled(seqid, iprot, oprot)
        args = read_args(iprot, RespondActivityTaskCanceled_args)
        result = RespondActivityTaskCanceled_result.new()
        begin
          @handler.RespondActivityTaskCanceled(args.canceledRequest)
        rescue ::CadenceThrift::BadRequestError => badRequestError
          result.badRequestError = badRequestError
        rescue ::CadenceThrift::InternalServiceError => internalServiceError
          result.internalServiceError = internalServiceError
        rescue ::CadenceThrift::EntityNotExistsError => entityNotExistError
          result.entityNotExistError = entityNotExistError
        rescue ::CadenceThrift::DomainNotActiveError => domainNotActiveError
          result.domainNotActiveError = domainNotActiveError
        rescue ::CadenceThrift::LimitExceededError => limitExceededError
          result.limitExceededError = limitExceededError
        rescue ::CadenceThrift::ServiceBusyError => serviceBusyError
          result.serviceBusyError = serviceBusyError
        rescue ::CadenceThrift::ClientVersionNotSupportedError => clientVersionNotSupportedError
          result.clientVersionNotSupportedError = clientVersionNotSupportedError
        end
        write_result(result, oprot, 'RespondActivityTaskCanceled', seqid)
      end

      def process_RespondActivityTaskCanceledByID(seqid, iprot, oprot)
        args = read_args(iprot, RespondActivityTaskCanceledByID_args)
        result = RespondActivityTaskCanceledByID_result.new()
        begin
          @handler.RespondActivityTaskCanceledByID(args.canceledRequest)
        rescue ::CadenceThrift::BadRequestError => badRequestError
          result.badRequestError = badRequestError
        rescue ::CadenceThrift::InternalServiceError => internalServiceError
          result.internalServiceError = internalServiceError
        rescue ::CadenceThrift::EntityNotExistsError => entityNotExistError
          result.entityNotExistError = entityNotExistError
        rescue ::CadenceThrift::DomainNotActiveError => domainNotActiveError
          result.domainNotActiveError = domainNotActiveError
        rescue ::CadenceThrift::LimitExceededError => limitExceededError
          result.limitExceededError = limitExceededError
        rescue ::CadenceThrift::ServiceBusyError => serviceBusyError
          result.serviceBusyError = serviceBusyError
        rescue ::CadenceThrift::ClientVersionNotSupportedError => clientVersionNotSupportedError
          result.clientVersionNotSupportedError = clientVersionNotSupportedError
        end
        write_result(result, oprot, 'RespondActivityTaskCanceledByID', seqid)
      end

      def process_RequestCancelWorkflowExecution(seqid, iprot, oprot)
        args = read_args(iprot, RequestCancelWorkflowExecution_args)
        result = RequestCancelWorkflowExecution_result.new()
        begin
          @handler.RequestCancelWorkflowExecution(args.cancelRequest)
        rescue ::CadenceThrift::BadRequestError => badRequestError
          result.badRequestError = badRequestError
        rescue ::CadenceThrift::InternalServiceError => internalServiceError
          result.internalServiceError = internalServiceError
        rescue ::CadenceThrift::EntityNotExistsError => entityNotExistError
          result.entityNotExistError = entityNotExistError
        rescue ::CadenceThrift::CancellationAlreadyRequestedError => cancellationAlreadyRequestedError
          result.cancellationAlreadyRequestedError = cancellationAlreadyRequestedError
        rescue ::CadenceThrift::ServiceBusyError => serviceBusyError
          result.serviceBusyError = serviceBusyError
        rescue ::CadenceThrift::DomainNotActiveError => domainNotActiveError
          result.domainNotActiveError = domainNotActiveError
        rescue ::CadenceThrift::LimitExceededError => limitExceededError
          result.limitExceededError = limitExceededError
        rescue ::CadenceThrift::ClientVersionNotSupportedError => clientVersionNotSupportedError
          result.clientVersionNotSupportedError = clientVersionNotSupportedError
        end
        write_result(result, oprot, 'RequestCancelWorkflowExecution', seqid)
      end

      def process_SignalWorkflowExecution(seqid, iprot, oprot)
        args = read_args(iprot, SignalWorkflowExecution_args)
        result = SignalWorkflowExecution_result.new()
        begin
          @handler.SignalWorkflowExecution(args.signalRequest)
        rescue ::CadenceThrift::BadRequestError => badRequestError
          result.badRequestError = badRequestError
        rescue ::CadenceThrift::InternalServiceError => internalServiceError
          result.internalServiceError = internalServiceError
        rescue ::CadenceThrift::EntityNotExistsError => entityNotExistError
          result.entityNotExistError = entityNotExistError
        rescue ::CadenceThrift::ServiceBusyError => serviceBusyError
          result.serviceBusyError = serviceBusyError
        rescue ::CadenceThrift::DomainNotActiveError => domainNotActiveError
          result.domainNotActiveError = domainNotActiveError
        rescue ::CadenceThrift::LimitExceededError => limitExceededError
          result.limitExceededError = limitExceededError
        rescue ::CadenceThrift::ClientVersionNotSupportedError => clientVersionNotSupportedError
          result.clientVersionNotSupportedError = clientVersionNotSupportedError
        end
        write_result(result, oprot, 'SignalWorkflowExecution', seqid)
      end

      def process_SignalWithStartWorkflowExecution(seqid, iprot, oprot)
        args = read_args(iprot, SignalWithStartWorkflowExecution_args)
        result = SignalWithStartWorkflowExecution_result.new()
        begin
          result.success = @handler.SignalWithStartWorkflowExecution(args.signalWithStartRequest)
        rescue ::CadenceThrift::BadRequestError => badRequestError
          result.badRequestError = badRequestError
        rescue ::CadenceThrift::InternalServiceError => internalServiceError
          result.internalServiceError = internalServiceError
        rescue ::CadenceThrift::EntityNotExistsError => entityNotExistError
          result.entityNotExistError = entityNotExistError
        rescue ::CadenceThrift::ServiceBusyError => serviceBusyError
          result.serviceBusyError = serviceBusyError
        rescue ::CadenceThrift::DomainNotActiveError => domainNotActiveError
          result.domainNotActiveError = domainNotActiveError
        rescue ::CadenceThrift::LimitExceededError => limitExceededError
          result.limitExceededError = limitExceededError
        rescue ::CadenceThrift::WorkflowExecutionAlreadyStartedError => workflowAlreadyStartedError
          result.workflowAlreadyStartedError = workflowAlreadyStartedError
        rescue ::CadenceThrift::ClientVersionNotSupportedError => clientVersionNotSupportedError
          result.clientVersionNotSupportedError = clientVersionNotSupportedError
        end
        write_result(result, oprot, 'SignalWithStartWorkflowExecution', seqid)
      end

      def process_ResetWorkflowExecution(seqid, iprot, oprot)
        args = read_args(iprot, ResetWorkflowExecution_args)
        result = ResetWorkflowExecution_result.new()
        begin
          result.success = @handler.ResetWorkflowExecution(args.resetRequest)
        rescue ::CadenceThrift::BadRequestError => badRequestError
          result.badRequestError = badRequestError
        rescue ::CadenceThrift::InternalServiceError => internalServiceError
          result.internalServiceError = internalServiceError
        rescue ::CadenceThrift::EntityNotExistsError => entityNotExistError
          result.entityNotExistError = entityNotExistError
        rescue ::CadenceThrift::ServiceBusyError => serviceBusyError
          result.serviceBusyError = serviceBusyError
        rescue ::CadenceThrift::DomainNotActiveError => domainNotActiveError
          result.domainNotActiveError = domainNotActiveError
        rescue ::CadenceThrift::LimitExceededError => limitExceededError
          result.limitExceededError = limitExceededError
        rescue ::CadenceThrift::ClientVersionNotSupportedError => clientVersionNotSupportedError
          result.clientVersionNotSupportedError = clientVersionNotSupportedError
        end
        write_result(result, oprot, 'ResetWorkflowExecution', seqid)
      end

      def process_TerminateWorkflowExecution(seqid, iprot, oprot)
        args = read_args(iprot, TerminateWorkflowExecution_args)
        result = TerminateWorkflowExecution_result.new()
        begin
          @handler.TerminateWorkflowExecution(args.terminateRequest)
        rescue ::CadenceThrift::BadRequestError => badRequestError
          result.badRequestError = badRequestError
        rescue ::CadenceThrift::InternalServiceError => internalServiceError
          result.internalServiceError = internalServiceError
        rescue ::CadenceThrift::EntityNotExistsError => entityNotExistError
          result.entityNotExistError = entityNotExistError
        rescue ::CadenceThrift::ServiceBusyError => serviceBusyError
          result.serviceBusyError = serviceBusyError
        rescue ::CadenceThrift::DomainNotActiveError => domainNotActiveError
          result.domainNotActiveError = domainNotActiveError
        rescue ::CadenceThrift::LimitExceededError => limitExceededError
          result.limitExceededError = limitExceededError
        rescue ::CadenceThrift::ClientVersionNotSupportedError => clientVersionNotSupportedError
          result.clientVersionNotSupportedError = clientVersionNotSupportedError
        end
        write_result(result, oprot, 'TerminateWorkflowExecution', seqid)
      end

      def process_ListOpenWorkflowExecutions(seqid, iprot, oprot)
        args = read_args(iprot, ListOpenWorkflowExecutions_args)
        result = ListOpenWorkflowExecutions_result.new()
        begin
          result.success = @handler.ListOpenWorkflowExecutions(args.listRequest)
        rescue ::CadenceThrift::BadRequestError => badRequestError
          result.badRequestError = badRequestError
        rescue ::CadenceThrift::InternalServiceError => internalServiceError
          result.internalServiceError = internalServiceError
        rescue ::CadenceThrift::EntityNotExistsError => entityNotExistError
          result.entityNotExistError = entityNotExistError
        rescue ::CadenceThrift::ServiceBusyError => serviceBusyError
          result.serviceBusyError = serviceBusyError
        rescue ::CadenceThrift::LimitExceededError => limitExceededError
          result.limitExceededError = limitExceededError
        rescue ::CadenceThrift::ClientVersionNotSupportedError => clientVersionNotSupportedError
          result.clientVersionNotSupportedError = clientVersionNotSupportedError
        end
        write_result(result, oprot, 'ListOpenWorkflowExecutions', seqid)
      end

      def process_ListClosedWorkflowExecutions(seqid, iprot, oprot)
        args = read_args(iprot, ListClosedWorkflowExecutions_args)
        result = ListClosedWorkflowExecutions_result.new()
        begin
          result.success = @handler.ListClosedWorkflowExecutions(args.listRequest)
        rescue ::CadenceThrift::BadRequestError => badRequestError
          result.badRequestError = badRequestError
        rescue ::CadenceThrift::InternalServiceError => internalServiceError
          result.internalServiceError = internalServiceError
        rescue ::CadenceThrift::EntityNotExistsError => entityNotExistError
          result.entityNotExistError = entityNotExistError
        rescue ::CadenceThrift::ServiceBusyError => serviceBusyError
          result.serviceBusyError = serviceBusyError
        rescue ::CadenceThrift::ClientVersionNotSupportedError => clientVersionNotSupportedError
          result.clientVersionNotSupportedError = clientVersionNotSupportedError
        end
        write_result(result, oprot, 'ListClosedWorkflowExecutions', seqid)
      end

      def process_ListWorkflowExecutions(seqid, iprot, oprot)
        args = read_args(iprot, ListWorkflowExecutions_args)
        result = ListWorkflowExecutions_result.new()
        begin
          result.success = @handler.ListWorkflowExecutions(args.listRequest)
        rescue ::CadenceThrift::BadRequestError => badRequestError
          result.badRequestError = badRequestError
        rescue ::CadenceThrift::InternalServiceError => internalServiceError
          result.internalServiceError = internalServiceError
        rescue ::CadenceThrift::EntityNotExistsError => entityNotExistError
          result.entityNotExistError = entityNotExistError
        rescue ::CadenceThrift::ServiceBusyError => serviceBusyError
          result.serviceBusyError = serviceBusyError
        rescue ::CadenceThrift::ClientVersionNotSupportedError => clientVersionNotSupportedError
          result.clientVersionNotSupportedError = clientVersionNotSupportedError
        end
        write_result(result, oprot, 'ListWorkflowExecutions', seqid)
      end

      def process_ListArchivedWorkflowExecutions(seqid, iprot, oprot)
        args = read_args(iprot, ListArchivedWorkflowExecutions_args)
        result = ListArchivedWorkflowExecutions_result.new()
        begin
          result.success = @handler.ListArchivedWorkflowExecutions(args.listRequest)
        rescue ::CadenceThrift::BadRequestError => badRequestError
          result.badRequestError = badRequestError
        rescue ::CadenceThrift::InternalServiceError => internalServiceError
          result.internalServiceError = internalServiceError
        rescue ::CadenceThrift::EntityNotExistsError => entityNotExistError
          result.entityNotExistError = entityNotExistError
        rescue ::CadenceThrift::ServiceBusyError => serviceBusyError
          result.serviceBusyError = serviceBusyError
        rescue ::CadenceThrift::ClientVersionNotSupportedError => clientVersionNotSupportedError
          result.clientVersionNotSupportedError = clientVersionNotSupportedError
        end
        write_result(result, oprot, 'ListArchivedWorkflowExecutions', seqid)
      end

      def process_ScanWorkflowExecutions(seqid, iprot, oprot)
        args = read_args(iprot, ScanWorkflowExecutions_args)
        result = ScanWorkflowExecutions_result.new()
        begin
          result.success = @handler.ScanWorkflowExecutions(args.listRequest)
        rescue ::CadenceThrift::BadRequestError => badRequestError
          result.badRequestError = badRequestError
        rescue ::CadenceThrift::InternalServiceError => internalServiceError
          result.internalServiceError = internalServiceError
        rescue ::CadenceThrift::EntityNotExistsError => entityNotExistError
          result.entityNotExistError = entityNotExistError
        rescue ::CadenceThrift::ServiceBusyError => serviceBusyError
          result.serviceBusyError = serviceBusyError
        rescue ::CadenceThrift::ClientVersionNotSupportedError => clientVersionNotSupportedError
          result.clientVersionNotSupportedError = clientVersionNotSupportedError
        end
        write_result(result, oprot, 'ScanWorkflowExecutions', seqid)
      end

      def process_CountWorkflowExecutions(seqid, iprot, oprot)
        args = read_args(iprot, CountWorkflowExecutions_args)
        result = CountWorkflowExecutions_result.new()
        begin
          result.success = @handler.CountWorkflowExecutions(args.countRequest)
        rescue ::CadenceThrift::BadRequestError => badRequestError
          result.badRequestError = badRequestError
        rescue ::CadenceThrift::InternalServiceError => internalServiceError
          result.internalServiceError = internalServiceError
        rescue ::CadenceThrift::EntityNotExistsError => entityNotExistError
          result.entityNotExistError = entityNotExistError
        rescue ::CadenceThrift::ServiceBusyError => serviceBusyError
          result.serviceBusyError = serviceBusyError
        rescue ::CadenceThrift::ClientVersionNotSupportedError => clientVersionNotSupportedError
          result.clientVersionNotSupportedError = clientVersionNotSupportedError
        end
        write_result(result, oprot, 'CountWorkflowExecutions', seqid)
      end

      def process_GetSearchAttributes(seqid, iprot, oprot)
        args = read_args(iprot, GetSearchAttributes_args)
        result = GetSearchAttributes_result.new()
        begin
          result.success = @handler.GetSearchAttributes()
        rescue ::CadenceThrift::InternalServiceError => internalServiceError
          result.internalServiceError = internalServiceError
        rescue ::CadenceThrift::ServiceBusyError => serviceBusyError
          result.serviceBusyError = serviceBusyError
        rescue ::CadenceThrift::ClientVersionNotSupportedError => clientVersionNotSupportedError
          result.clientVersionNotSupportedError = clientVersionNotSupportedError
        end
        write_result(result, oprot, 'GetSearchAttributes', seqid)
      end

      def process_RespondQueryTaskCompleted(seqid, iprot, oprot)
        args = read_args(iprot, RespondQueryTaskCompleted_args)
        result = RespondQueryTaskCompleted_result.new()
        begin
          @handler.RespondQueryTaskCompleted(args.completeRequest)
        rescue ::CadenceThrift::BadRequestError => badRequestError
          result.badRequestError = badRequestError
        rescue ::CadenceThrift::InternalServiceError => internalServiceError
          result.internalServiceError = internalServiceError
        rescue ::CadenceThrift::EntityNotExistsError => entityNotExistError
          result.entityNotExistError = entityNotExistError
        rescue ::CadenceThrift::LimitExceededError => limitExceededError
          result.limitExceededError = limitExceededError
        rescue ::CadenceThrift::ServiceBusyError => serviceBusyError
          result.serviceBusyError = serviceBusyError
        rescue ::CadenceThrift::DomainNotActiveError => domainNotActiveError
          result.domainNotActiveError = domainNotActiveError
        rescue ::CadenceThrift::ClientVersionNotSupportedError => clientVersionNotSupportedError
          result.clientVersionNotSupportedError = clientVersionNotSupportedError
        end
        write_result(result, oprot, 'RespondQueryTaskCompleted', seqid)
      end

      def process_ResetStickyTaskList(seqid, iprot, oprot)
        args = read_args(iprot, ResetStickyTaskList_args)
        result = ResetStickyTaskList_result.new()
        begin
          result.success = @handler.ResetStickyTaskList(args.resetRequest)
        rescue ::CadenceThrift::BadRequestError => badRequestError
          result.badRequestError = badRequestError
        rescue ::CadenceThrift::InternalServiceError => internalServiceError
          result.internalServiceError = internalServiceError
        rescue ::CadenceThrift::EntityNotExistsError => entityNotExistError
          result.entityNotExistError = entityNotExistError
        rescue ::CadenceThrift::LimitExceededError => limitExceededError
          result.limitExceededError = limitExceededError
        rescue ::CadenceThrift::ServiceBusyError => serviceBusyError
          result.serviceBusyError = serviceBusyError
        rescue ::CadenceThrift::DomainNotActiveError => domainNotActiveError
          result.domainNotActiveError = domainNotActiveError
        rescue ::CadenceThrift::ClientVersionNotSupportedError => clientVersionNotSupportedError
          result.clientVersionNotSupportedError = clientVersionNotSupportedError
        end
        write_result(result, oprot, 'ResetStickyTaskList', seqid)
      end

      def process_QueryWorkflow(seqid, iprot, oprot)
        args = read_args(iprot, QueryWorkflow_args)
        result = QueryWorkflow_result.new()
        begin
          result.success = @handler.QueryWorkflow(args.queryRequest)
        rescue ::CadenceThrift::BadRequestError => badRequestError
          result.badRequestError = badRequestError
        rescue ::CadenceThrift::InternalServiceError => internalServiceError
          result.internalServiceError = internalServiceError
        rescue ::CadenceThrift::EntityNotExistsError => entityNotExistError
          result.entityNotExistError = entityNotExistError
        rescue ::CadenceThrift::QueryFailedError => queryFailedError
          result.queryFailedError = queryFailedError
        rescue ::CadenceThrift::LimitExceededError => limitExceededError
          result.limitExceededError = limitExceededError
        rescue ::CadenceThrift::ServiceBusyError => serviceBusyError
          result.serviceBusyError = serviceBusyError
        rescue ::CadenceThrift::ClientVersionNotSupportedError => clientVersionNotSupportedError
          result.clientVersionNotSupportedError = clientVersionNotSupportedError
        end
        write_result(result, oprot, 'QueryWorkflow', seqid)
      end

      def process_DescribeWorkflowExecution(seqid, iprot, oprot)
        args = read_args(iprot, DescribeWorkflowExecution_args)
        result = DescribeWorkflowExecution_result.new()
        begin
          result.success = @handler.DescribeWorkflowExecution(args.describeRequest)
        rescue ::CadenceThrift::BadRequestError => badRequestError
          result.badRequestError = badRequestError
        rescue ::CadenceThrift::InternalServiceError => internalServiceError
          result.internalServiceError = internalServiceError
        rescue ::CadenceThrift::EntityNotExistsError => entityNotExistError
          result.entityNotExistError = entityNotExistError
        rescue ::CadenceThrift::LimitExceededError => limitExceededError
          result.limitExceededError = limitExceededError
        rescue ::CadenceThrift::ServiceBusyError => serviceBusyError
          result.serviceBusyError = serviceBusyError
        rescue ::CadenceThrift::ClientVersionNotSupportedError => clientVersionNotSupportedError
          result.clientVersionNotSupportedError = clientVersionNotSupportedError
        end
        write_result(result, oprot, 'DescribeWorkflowExecution', seqid)
      end

      def process_DescribeTaskList(seqid, iprot, oprot)
        args = read_args(iprot, DescribeTaskList_args)
        result = DescribeTaskList_result.new()
        begin
          result.success = @handler.DescribeTaskList(args.request)
        rescue ::CadenceThrift::BadRequestError => badRequestError
          result.badRequestError = badRequestError
        rescue ::CadenceThrift::InternalServiceError => internalServiceError
          result.internalServiceError = internalServiceError
        rescue ::CadenceThrift::EntityNotExistsError => entityNotExistError
          result.entityNotExistError = entityNotExistError
        rescue ::CadenceThrift::LimitExceededError => limitExceededError
          result.limitExceededError = limitExceededError
        rescue ::CadenceThrift::ServiceBusyError => serviceBusyError
          result.serviceBusyError = serviceBusyError
        rescue ::CadenceThrift::ClientVersionNotSupportedError => clientVersionNotSupportedError
          result.clientVersionNotSupportedError = clientVersionNotSupportedError
        end
        write_result(result, oprot, 'DescribeTaskList', seqid)
      end

    end

    # HELPER FUNCTIONS AND STRUCTURES

    class RegisterDomain_args
      include ::Thrift::Struct, ::Thrift::Struct_Union
      REGISTERREQUEST = 1

      FIELDS = {
        REGISTERREQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'registerRequest', :class => ::CadenceThrift::RegisterDomainRequest}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class RegisterDomain_result
      include ::Thrift::Struct, ::Thrift::Struct_Union
      BADREQUESTERROR = 1
      INTERNALSERVICEERROR = 2
      DOMAINEXISTSERROR = 3
      SERVICEBUSYERROR = 4
      CLIENTVERSIONNOTSUPPORTEDERROR = 5

      FIELDS = {
        BADREQUESTERROR => {:type => ::Thrift::Types::STRUCT, :name => 'badRequestError', :class => ::CadenceThrift::BadRequestError},
        INTERNALSERVICEERROR => {:type => ::Thrift::Types::STRUCT, :name => 'internalServiceError', :class => ::CadenceThrift::InternalServiceError},
        DOMAINEXISTSERROR => {:type => ::Thrift::Types::STRUCT, :name => 'domainExistsError', :class => ::CadenceThrift::DomainAlreadyExistsError},
        SERVICEBUSYERROR => {:type => ::Thrift::Types::STRUCT, :name => 'serviceBusyError', :class => ::CadenceThrift::ServiceBusyError},
        CLIENTVERSIONNOTSUPPORTEDERROR => {:type => ::Thrift::Types::STRUCT, :name => 'clientVersionNotSupportedError', :class => ::CadenceThrift::ClientVersionNotSupportedError}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class DescribeDomain_args
      include ::Thrift::Struct, ::Thrift::Struct_Union
      DESCRIBEREQUEST = 1

      FIELDS = {
        DESCRIBEREQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'describeRequest', :class => ::CadenceThrift::DescribeDomainRequest}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class DescribeDomain_result
      include ::Thrift::Struct, ::Thrift::Struct_Union
      SUCCESS = 0
      BADREQUESTERROR = 1
      INTERNALSERVICEERROR = 2
      ENTITYNOTEXISTERROR = 3
      SERVICEBUSYERROR = 4
      CLIENTVERSIONNOTSUPPORTEDERROR = 5

      FIELDS = {
        SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::CadenceThrift::DescribeDomainResponse},
        BADREQUESTERROR => {:type => ::Thrift::Types::STRUCT, :name => 'badRequestError', :class => ::CadenceThrift::BadRequestError},
        INTERNALSERVICEERROR => {:type => ::Thrift::Types::STRUCT, :name => 'internalServiceError', :class => ::CadenceThrift::InternalServiceError},
        ENTITYNOTEXISTERROR => {:type => ::Thrift::Types::STRUCT, :name => 'entityNotExistError', :class => ::CadenceThrift::EntityNotExistsError},
        SERVICEBUSYERROR => {:type => ::Thrift::Types::STRUCT, :name => 'serviceBusyError', :class => ::CadenceThrift::ServiceBusyError},
        CLIENTVERSIONNOTSUPPORTEDERROR => {:type => ::Thrift::Types::STRUCT, :name => 'clientVersionNotSupportedError', :class => ::CadenceThrift::ClientVersionNotSupportedError}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class ListDomains_args
      include ::Thrift::Struct, ::Thrift::Struct_Union
      LISTREQUEST = 1

      FIELDS = {
        LISTREQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'listRequest', :class => ::CadenceThrift::ListDomainsRequest}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class ListDomains_result
      include ::Thrift::Struct, ::Thrift::Struct_Union
      SUCCESS = 0
      BADREQUESTERROR = 1
      INTERNALSERVICEERROR = 2
      ENTITYNOTEXISTERROR = 3
      SERVICEBUSYERROR = 4
      CLIENTVERSIONNOTSUPPORTEDERROR = 5

      FIELDS = {
        SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::CadenceThrift::ListDomainsResponse},
        BADREQUESTERROR => {:type => ::Thrift::Types::STRUCT, :name => 'badRequestError', :class => ::CadenceThrift::BadRequestError},
        INTERNALSERVICEERROR => {:type => ::Thrift::Types::STRUCT, :name => 'internalServiceError', :class => ::CadenceThrift::InternalServiceError},
        ENTITYNOTEXISTERROR => {:type => ::Thrift::Types::STRUCT, :name => 'entityNotExistError', :class => ::CadenceThrift::EntityNotExistsError},
        SERVICEBUSYERROR => {:type => ::Thrift::Types::STRUCT, :name => 'serviceBusyError', :class => ::CadenceThrift::ServiceBusyError},
        CLIENTVERSIONNOTSUPPORTEDERROR => {:type => ::Thrift::Types::STRUCT, :name => 'clientVersionNotSupportedError', :class => ::CadenceThrift::ClientVersionNotSupportedError}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class UpdateDomain_args
      include ::Thrift::Struct, ::Thrift::Struct_Union
      UPDATEREQUEST = 1

      FIELDS = {
        UPDATEREQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'updateRequest', :class => ::CadenceThrift::UpdateDomainRequest}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class UpdateDomain_result
      include ::Thrift::Struct, ::Thrift::Struct_Union
      SUCCESS = 0
      BADREQUESTERROR = 1
      INTERNALSERVICEERROR = 2
      ENTITYNOTEXISTERROR = 3
      SERVICEBUSYERROR = 4
      DOMAINNOTACTIVEERROR = 5
      CLIENTVERSIONNOTSUPPORTEDERROR = 6

      FIELDS = {
        SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::CadenceThrift::UpdateDomainResponse},
        BADREQUESTERROR => {:type => ::Thrift::Types::STRUCT, :name => 'badRequestError', :class => ::CadenceThrift::BadRequestError},
        INTERNALSERVICEERROR => {:type => ::Thrift::Types::STRUCT, :name => 'internalServiceError', :class => ::CadenceThrift::InternalServiceError},
        ENTITYNOTEXISTERROR => {:type => ::Thrift::Types::STRUCT, :name => 'entityNotExistError', :class => ::CadenceThrift::EntityNotExistsError},
        SERVICEBUSYERROR => {:type => ::Thrift::Types::STRUCT, :name => 'serviceBusyError', :class => ::CadenceThrift::ServiceBusyError},
        DOMAINNOTACTIVEERROR => {:type => ::Thrift::Types::STRUCT, :name => 'domainNotActiveError', :class => ::CadenceThrift::DomainNotActiveError},
        CLIENTVERSIONNOTSUPPORTEDERROR => {:type => ::Thrift::Types::STRUCT, :name => 'clientVersionNotSupportedError', :class => ::CadenceThrift::ClientVersionNotSupportedError}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class DeprecateDomain_args
      include ::Thrift::Struct, ::Thrift::Struct_Union
      DEPRECATEREQUEST = 1

      FIELDS = {
        DEPRECATEREQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'deprecateRequest', :class => ::CadenceThrift::DeprecateDomainRequest}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class DeprecateDomain_result
      include ::Thrift::Struct, ::Thrift::Struct_Union
      BADREQUESTERROR = 1
      INTERNALSERVICEERROR = 2
      ENTITYNOTEXISTERROR = 3
      SERVICEBUSYERROR = 4
      DOMAINNOTACTIVEERROR = 5
      CLIENTVERSIONNOTSUPPORTEDERROR = 6

      FIELDS = {
        BADREQUESTERROR => {:type => ::Thrift::Types::STRUCT, :name => 'badRequestError', :class => ::CadenceThrift::BadRequestError},
        INTERNALSERVICEERROR => {:type => ::Thrift::Types::STRUCT, :name => 'internalServiceError', :class => ::CadenceThrift::InternalServiceError},
        ENTITYNOTEXISTERROR => {:type => ::Thrift::Types::STRUCT, :name => 'entityNotExistError', :class => ::CadenceThrift::EntityNotExistsError},
        SERVICEBUSYERROR => {:type => ::Thrift::Types::STRUCT, :name => 'serviceBusyError', :class => ::CadenceThrift::ServiceBusyError},
        DOMAINNOTACTIVEERROR => {:type => ::Thrift::Types::STRUCT, :name => 'domainNotActiveError', :class => ::CadenceThrift::DomainNotActiveError},
        CLIENTVERSIONNOTSUPPORTEDERROR => {:type => ::Thrift::Types::STRUCT, :name => 'clientVersionNotSupportedError', :class => ::CadenceThrift::ClientVersionNotSupportedError}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class StartWorkflowExecution_args
      include ::Thrift::Struct, ::Thrift::Struct_Union
      STARTREQUEST = 1

      FIELDS = {
        STARTREQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'startRequest', :class => ::CadenceThrift::StartWorkflowExecutionRequest}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class StartWorkflowExecution_result
      include ::Thrift::Struct, ::Thrift::Struct_Union
      SUCCESS = 0
      BADREQUESTERROR = 1
      INTERNALSERVICEERROR = 2
      SESSIONALREADYEXISTERROR = 3
      SERVICEBUSYERROR = 4
      DOMAINNOTACTIVEERROR = 5
      LIMITEXCEEDEDERROR = 6
      ENTITYNOTEXISTERROR = 7
      CLIENTVERSIONNOTSUPPORTEDERROR = 8

      FIELDS = {
        SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::CadenceThrift::StartWorkflowExecutionResponse},
        BADREQUESTERROR => {:type => ::Thrift::Types::STRUCT, :name => 'badRequestError', :class => ::CadenceThrift::BadRequestError},
        INTERNALSERVICEERROR => {:type => ::Thrift::Types::STRUCT, :name => 'internalServiceError', :class => ::CadenceThrift::InternalServiceError},
        SESSIONALREADYEXISTERROR => {:type => ::Thrift::Types::STRUCT, :name => 'sessionAlreadyExistError', :class => ::CadenceThrift::WorkflowExecutionAlreadyStartedError},
        SERVICEBUSYERROR => {:type => ::Thrift::Types::STRUCT, :name => 'serviceBusyError', :class => ::CadenceThrift::ServiceBusyError},
        DOMAINNOTACTIVEERROR => {:type => ::Thrift::Types::STRUCT, :name => 'domainNotActiveError', :class => ::CadenceThrift::DomainNotActiveError},
        LIMITEXCEEDEDERROR => {:type => ::Thrift::Types::STRUCT, :name => 'limitExceededError', :class => ::CadenceThrift::LimitExceededError},
        ENTITYNOTEXISTERROR => {:type => ::Thrift::Types::STRUCT, :name => 'entityNotExistError', :class => ::CadenceThrift::EntityNotExistsError},
        CLIENTVERSIONNOTSUPPORTEDERROR => {:type => ::Thrift::Types::STRUCT, :name => 'clientVersionNotSupportedError', :class => ::CadenceThrift::ClientVersionNotSupportedError}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class GetWorkflowExecutionHistory_args
      include ::Thrift::Struct, ::Thrift::Struct_Union
      GETREQUEST = 1

      FIELDS = {
        GETREQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'getRequest', :class => ::CadenceThrift::GetWorkflowExecutionHistoryRequest}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class GetWorkflowExecutionHistory_result
      include ::Thrift::Struct, ::Thrift::Struct_Union
      SUCCESS = 0
      BADREQUESTERROR = 1
      INTERNALSERVICEERROR = 2
      ENTITYNOTEXISTERROR = 3
      SERVICEBUSYERROR = 4
      CLIENTVERSIONNOTSUPPORTEDERROR = 5

      FIELDS = {
        SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::CadenceThrift::GetWorkflowExecutionHistoryResponse},
        BADREQUESTERROR => {:type => ::Thrift::Types::STRUCT, :name => 'badRequestError', :class => ::CadenceThrift::BadRequestError},
        INTERNALSERVICEERROR => {:type => ::Thrift::Types::STRUCT, :name => 'internalServiceError', :class => ::CadenceThrift::InternalServiceError},
        ENTITYNOTEXISTERROR => {:type => ::Thrift::Types::STRUCT, :name => 'entityNotExistError', :class => ::CadenceThrift::EntityNotExistsError},
        SERVICEBUSYERROR => {:type => ::Thrift::Types::STRUCT, :name => 'serviceBusyError', :class => ::CadenceThrift::ServiceBusyError},
        CLIENTVERSIONNOTSUPPORTEDERROR => {:type => ::Thrift::Types::STRUCT, :name => 'clientVersionNotSupportedError', :class => ::CadenceThrift::ClientVersionNotSupportedError}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class PollForDecisionTask_args
      include ::Thrift::Struct, ::Thrift::Struct_Union
      POLLREQUEST = 1

      FIELDS = {
        POLLREQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'pollRequest', :class => ::CadenceThrift::PollForDecisionTaskRequest}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class PollForDecisionTask_result
      include ::Thrift::Struct, ::Thrift::Struct_Union
      SUCCESS = 0
      BADREQUESTERROR = 1
      INTERNALSERVICEERROR = 2
      SERVICEBUSYERROR = 3
      LIMITEXCEEDEDERROR = 4
      ENTITYNOTEXISTERROR = 5
      DOMAINNOTACTIVEERROR = 6
      CLIENTVERSIONNOTSUPPORTEDERROR = 7

      FIELDS = {
        SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::CadenceThrift::PollForDecisionTaskResponse},
        BADREQUESTERROR => {:type => ::Thrift::Types::STRUCT, :name => 'badRequestError', :class => ::CadenceThrift::BadRequestError},
        INTERNALSERVICEERROR => {:type => ::Thrift::Types::STRUCT, :name => 'internalServiceError', :class => ::CadenceThrift::InternalServiceError},
        SERVICEBUSYERROR => {:type => ::Thrift::Types::STRUCT, :name => 'serviceBusyError', :class => ::CadenceThrift::ServiceBusyError},
        LIMITEXCEEDEDERROR => {:type => ::Thrift::Types::STRUCT, :name => 'limitExceededError', :class => ::CadenceThrift::LimitExceededError},
        ENTITYNOTEXISTERROR => {:type => ::Thrift::Types::STRUCT, :name => 'entityNotExistError', :class => ::CadenceThrift::EntityNotExistsError},
        DOMAINNOTACTIVEERROR => {:type => ::Thrift::Types::STRUCT, :name => 'domainNotActiveError', :class => ::CadenceThrift::DomainNotActiveError},
        CLIENTVERSIONNOTSUPPORTEDERROR => {:type => ::Thrift::Types::STRUCT, :name => 'clientVersionNotSupportedError', :class => ::CadenceThrift::ClientVersionNotSupportedError}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class RespondDecisionTaskCompleted_args
      include ::Thrift::Struct, ::Thrift::Struct_Union
      COMPLETEREQUEST = 1

      FIELDS = {
        COMPLETEREQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'completeRequest', :class => ::CadenceThrift::RespondDecisionTaskCompletedRequest}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class RespondDecisionTaskCompleted_result
      include ::Thrift::Struct, ::Thrift::Struct_Union
      SUCCESS = 0
      BADREQUESTERROR = 1
      INTERNALSERVICEERROR = 2
      ENTITYNOTEXISTERROR = 3
      DOMAINNOTACTIVEERROR = 4
      LIMITEXCEEDEDERROR = 5
      SERVICEBUSYERROR = 6
      CLIENTVERSIONNOTSUPPORTEDERROR = 7

      FIELDS = {
        SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::CadenceThrift::RespondDecisionTaskCompletedResponse},
        BADREQUESTERROR => {:type => ::Thrift::Types::STRUCT, :name => 'badRequestError', :class => ::CadenceThrift::BadRequestError},
        INTERNALSERVICEERROR => {:type => ::Thrift::Types::STRUCT, :name => 'internalServiceError', :class => ::CadenceThrift::InternalServiceError},
        ENTITYNOTEXISTERROR => {:type => ::Thrift::Types::STRUCT, :name => 'entityNotExistError', :class => ::CadenceThrift::EntityNotExistsError},
        DOMAINNOTACTIVEERROR => {:type => ::Thrift::Types::STRUCT, :name => 'domainNotActiveError', :class => ::CadenceThrift::DomainNotActiveError},
        LIMITEXCEEDEDERROR => {:type => ::Thrift::Types::STRUCT, :name => 'limitExceededError', :class => ::CadenceThrift::LimitExceededError},
        SERVICEBUSYERROR => {:type => ::Thrift::Types::STRUCT, :name => 'serviceBusyError', :class => ::CadenceThrift::ServiceBusyError},
        CLIENTVERSIONNOTSUPPORTEDERROR => {:type => ::Thrift::Types::STRUCT, :name => 'clientVersionNotSupportedError', :class => ::CadenceThrift::ClientVersionNotSupportedError}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class RespondDecisionTaskFailed_args
      include ::Thrift::Struct, ::Thrift::Struct_Union
      FAILEDREQUEST = 1

      FIELDS = {
        FAILEDREQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'failedRequest', :class => ::CadenceThrift::RespondDecisionTaskFailedRequest}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class RespondDecisionTaskFailed_result
      include ::Thrift::Struct, ::Thrift::Struct_Union
      BADREQUESTERROR = 1
      INTERNALSERVICEERROR = 2
      ENTITYNOTEXISTERROR = 3
      DOMAINNOTACTIVEERROR = 4
      LIMITEXCEEDEDERROR = 5
      SERVICEBUSYERROR = 6
      CLIENTVERSIONNOTSUPPORTEDERROR = 7

      FIELDS = {
        BADREQUESTERROR => {:type => ::Thrift::Types::STRUCT, :name => 'badRequestError', :class => ::CadenceThrift::BadRequestError},
        INTERNALSERVICEERROR => {:type => ::Thrift::Types::STRUCT, :name => 'internalServiceError', :class => ::CadenceThrift::InternalServiceError},
        ENTITYNOTEXISTERROR => {:type => ::Thrift::Types::STRUCT, :name => 'entityNotExistError', :class => ::CadenceThrift::EntityNotExistsError},
        DOMAINNOTACTIVEERROR => {:type => ::Thrift::Types::STRUCT, :name => 'domainNotActiveError', :class => ::CadenceThrift::DomainNotActiveError},
        LIMITEXCEEDEDERROR => {:type => ::Thrift::Types::STRUCT, :name => 'limitExceededError', :class => ::CadenceThrift::LimitExceededError},
        SERVICEBUSYERROR => {:type => ::Thrift::Types::STRUCT, :name => 'serviceBusyError', :class => ::CadenceThrift::ServiceBusyError},
        CLIENTVERSIONNOTSUPPORTEDERROR => {:type => ::Thrift::Types::STRUCT, :name => 'clientVersionNotSupportedError', :class => ::CadenceThrift::ClientVersionNotSupportedError}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class PollForActivityTask_args
      include ::Thrift::Struct, ::Thrift::Struct_Union
      POLLREQUEST = 1

      FIELDS = {
        POLLREQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'pollRequest', :class => ::CadenceThrift::PollForActivityTaskRequest}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class PollForActivityTask_result
      include ::Thrift::Struct, ::Thrift::Struct_Union
      SUCCESS = 0
      BADREQUESTERROR = 1
      INTERNALSERVICEERROR = 2
      SERVICEBUSYERROR = 3
      LIMITEXCEEDEDERROR = 4
      ENTITYNOTEXISTERROR = 5
      DOMAINNOTACTIVEERROR = 6
      CLIENTVERSIONNOTSUPPORTEDERROR = 7

      FIELDS = {
        SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::CadenceThrift::PollForActivityTaskResponse},
        BADREQUESTERROR => {:type => ::Thrift::Types::STRUCT, :name => 'badRequestError', :class => ::CadenceThrift::BadRequestError},
        INTERNALSERVICEERROR => {:type => ::Thrift::Types::STRUCT, :name => 'internalServiceError', :class => ::CadenceThrift::InternalServiceError},
        SERVICEBUSYERROR => {:type => ::Thrift::Types::STRUCT, :name => 'serviceBusyError', :class => ::CadenceThrift::ServiceBusyError},
        LIMITEXCEEDEDERROR => {:type => ::Thrift::Types::STRUCT, :name => 'limitExceededError', :class => ::CadenceThrift::LimitExceededError},
        ENTITYNOTEXISTERROR => {:type => ::Thrift::Types::STRUCT, :name => 'entityNotExistError', :class => ::CadenceThrift::EntityNotExistsError},
        DOMAINNOTACTIVEERROR => {:type => ::Thrift::Types::STRUCT, :name => 'domainNotActiveError', :class => ::CadenceThrift::DomainNotActiveError},
        CLIENTVERSIONNOTSUPPORTEDERROR => {:type => ::Thrift::Types::STRUCT, :name => 'clientVersionNotSupportedError', :class => ::CadenceThrift::ClientVersionNotSupportedError}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class RecordActivityTaskHeartbeat_args
      include ::Thrift::Struct, ::Thrift::Struct_Union
      HEARTBEATREQUEST = 1

      FIELDS = {
        HEARTBEATREQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'heartbeatRequest', :class => ::CadenceThrift::RecordActivityTaskHeartbeatRequest}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class RecordActivityTaskHeartbeat_result
      include ::Thrift::Struct, ::Thrift::Struct_Union
      SUCCESS = 0
      BADREQUESTERROR = 1
      INTERNALSERVICEERROR = 2
      ENTITYNOTEXISTERROR = 3
      DOMAINNOTACTIVEERROR = 4
      LIMITEXCEEDEDERROR = 5
      SERVICEBUSYERROR = 6
      CLIENTVERSIONNOTSUPPORTEDERROR = 7

      FIELDS = {
        SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::CadenceThrift::RecordActivityTaskHeartbeatResponse},
        BADREQUESTERROR => {:type => ::Thrift::Types::STRUCT, :name => 'badRequestError', :class => ::CadenceThrift::BadRequestError},
        INTERNALSERVICEERROR => {:type => ::Thrift::Types::STRUCT, :name => 'internalServiceError', :class => ::CadenceThrift::InternalServiceError},
        ENTITYNOTEXISTERROR => {:type => ::Thrift::Types::STRUCT, :name => 'entityNotExistError', :class => ::CadenceThrift::EntityNotExistsError},
        DOMAINNOTACTIVEERROR => {:type => ::Thrift::Types::STRUCT, :name => 'domainNotActiveError', :class => ::CadenceThrift::DomainNotActiveError},
        LIMITEXCEEDEDERROR => {:type => ::Thrift::Types::STRUCT, :name => 'limitExceededError', :class => ::CadenceThrift::LimitExceededError},
        SERVICEBUSYERROR => {:type => ::Thrift::Types::STRUCT, :name => 'serviceBusyError', :class => ::CadenceThrift::ServiceBusyError},
        CLIENTVERSIONNOTSUPPORTEDERROR => {:type => ::Thrift::Types::STRUCT, :name => 'clientVersionNotSupportedError', :class => ::CadenceThrift::ClientVersionNotSupportedError}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class RecordActivityTaskHeartbeatByID_args
      include ::Thrift::Struct, ::Thrift::Struct_Union
      HEARTBEATREQUEST = 1

      FIELDS = {
        HEARTBEATREQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'heartbeatRequest', :class => ::CadenceThrift::RecordActivityTaskHeartbeatByIDRequest}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class RecordActivityTaskHeartbeatByID_result
      include ::Thrift::Struct, ::Thrift::Struct_Union
      SUCCESS = 0
      BADREQUESTERROR = 1
      INTERNALSERVICEERROR = 2
      ENTITYNOTEXISTERROR = 3
      DOMAINNOTACTIVEERROR = 4
      LIMITEXCEEDEDERROR = 5
      SERVICEBUSYERROR = 6
      CLIENTVERSIONNOTSUPPORTEDERROR = 7

      FIELDS = {
        SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::CadenceThrift::RecordActivityTaskHeartbeatResponse},
        BADREQUESTERROR => {:type => ::Thrift::Types::STRUCT, :name => 'badRequestError', :class => ::CadenceThrift::BadRequestError},
        INTERNALSERVICEERROR => {:type => ::Thrift::Types::STRUCT, :name => 'internalServiceError', :class => ::CadenceThrift::InternalServiceError},
        ENTITYNOTEXISTERROR => {:type => ::Thrift::Types::STRUCT, :name => 'entityNotExistError', :class => ::CadenceThrift::EntityNotExistsError},
        DOMAINNOTACTIVEERROR => {:type => ::Thrift::Types::STRUCT, :name => 'domainNotActiveError', :class => ::CadenceThrift::DomainNotActiveError},
        LIMITEXCEEDEDERROR => {:type => ::Thrift::Types::STRUCT, :name => 'limitExceededError', :class => ::CadenceThrift::LimitExceededError},
        SERVICEBUSYERROR => {:type => ::Thrift::Types::STRUCT, :name => 'serviceBusyError', :class => ::CadenceThrift::ServiceBusyError},
        CLIENTVERSIONNOTSUPPORTEDERROR => {:type => ::Thrift::Types::STRUCT, :name => 'clientVersionNotSupportedError', :class => ::CadenceThrift::ClientVersionNotSupportedError}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class RespondActivityTaskCompleted_args
      include ::Thrift::Struct, ::Thrift::Struct_Union
      COMPLETEREQUEST = 1

      FIELDS = {
        COMPLETEREQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'completeRequest', :class => ::CadenceThrift::RespondActivityTaskCompletedRequest}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class RespondActivityTaskCompleted_result
      include ::Thrift::Struct, ::Thrift::Struct_Union
      BADREQUESTERROR = 1
      INTERNALSERVICEERROR = 2
      ENTITYNOTEXISTERROR = 3
      DOMAINNOTACTIVEERROR = 4
      LIMITEXCEEDEDERROR = 5
      SERVICEBUSYERROR = 6
      CLIENTVERSIONNOTSUPPORTEDERROR = 7

      FIELDS = {
        BADREQUESTERROR => {:type => ::Thrift::Types::STRUCT, :name => 'badRequestError', :class => ::CadenceThrift::BadRequestError},
        INTERNALSERVICEERROR => {:type => ::Thrift::Types::STRUCT, :name => 'internalServiceError', :class => ::CadenceThrift::InternalServiceError},
        ENTITYNOTEXISTERROR => {:type => ::Thrift::Types::STRUCT, :name => 'entityNotExistError', :class => ::CadenceThrift::EntityNotExistsError},
        DOMAINNOTACTIVEERROR => {:type => ::Thrift::Types::STRUCT, :name => 'domainNotActiveError', :class => ::CadenceThrift::DomainNotActiveError},
        LIMITEXCEEDEDERROR => {:type => ::Thrift::Types::STRUCT, :name => 'limitExceededError', :class => ::CadenceThrift::LimitExceededError},
        SERVICEBUSYERROR => {:type => ::Thrift::Types::STRUCT, :name => 'serviceBusyError', :class => ::CadenceThrift::ServiceBusyError},
        CLIENTVERSIONNOTSUPPORTEDERROR => {:type => ::Thrift::Types::STRUCT, :name => 'clientVersionNotSupportedError', :class => ::CadenceThrift::ClientVersionNotSupportedError}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class RespondActivityTaskCompletedByID_args
      include ::Thrift::Struct, ::Thrift::Struct_Union
      COMPLETEREQUEST = 1

      FIELDS = {
        COMPLETEREQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'completeRequest', :class => ::CadenceThrift::RespondActivityTaskCompletedByIDRequest}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class RespondActivityTaskCompletedByID_result
      include ::Thrift::Struct, ::Thrift::Struct_Union
      BADREQUESTERROR = 1
      INTERNALSERVICEERROR = 2
      ENTITYNOTEXISTERROR = 3
      DOMAINNOTACTIVEERROR = 4
      LIMITEXCEEDEDERROR = 5
      SERVICEBUSYERROR = 6
      CLIENTVERSIONNOTSUPPORTEDERROR = 7

      FIELDS = {
        BADREQUESTERROR => {:type => ::Thrift::Types::STRUCT, :name => 'badRequestError', :class => ::CadenceThrift::BadRequestError},
        INTERNALSERVICEERROR => {:type => ::Thrift::Types::STRUCT, :name => 'internalServiceError', :class => ::CadenceThrift::InternalServiceError},
        ENTITYNOTEXISTERROR => {:type => ::Thrift::Types::STRUCT, :name => 'entityNotExistError', :class => ::CadenceThrift::EntityNotExistsError},
        DOMAINNOTACTIVEERROR => {:type => ::Thrift::Types::STRUCT, :name => 'domainNotActiveError', :class => ::CadenceThrift::DomainNotActiveError},
        LIMITEXCEEDEDERROR => {:type => ::Thrift::Types::STRUCT, :name => 'limitExceededError', :class => ::CadenceThrift::LimitExceededError},
        SERVICEBUSYERROR => {:type => ::Thrift::Types::STRUCT, :name => 'serviceBusyError', :class => ::CadenceThrift::ServiceBusyError},
        CLIENTVERSIONNOTSUPPORTEDERROR => {:type => ::Thrift::Types::STRUCT, :name => 'clientVersionNotSupportedError', :class => ::CadenceThrift::ClientVersionNotSupportedError}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class RespondActivityTaskFailed_args
      include ::Thrift::Struct, ::Thrift::Struct_Union
      FAILREQUEST = 1

      FIELDS = {
        FAILREQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'failRequest', :class => ::CadenceThrift::RespondActivityTaskFailedRequest}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class RespondActivityTaskFailed_result
      include ::Thrift::Struct, ::Thrift::Struct_Union
      BADREQUESTERROR = 1
      INTERNALSERVICEERROR = 2
      ENTITYNOTEXISTERROR = 3
      DOMAINNOTACTIVEERROR = 4
      LIMITEXCEEDEDERROR = 5
      SERVICEBUSYERROR = 6
      CLIENTVERSIONNOTSUPPORTEDERROR = 7

      FIELDS = {
        BADREQUESTERROR => {:type => ::Thrift::Types::STRUCT, :name => 'badRequestError', :class => ::CadenceThrift::BadRequestError},
        INTERNALSERVICEERROR => {:type => ::Thrift::Types::STRUCT, :name => 'internalServiceError', :class => ::CadenceThrift::InternalServiceError},
        ENTITYNOTEXISTERROR => {:type => ::Thrift::Types::STRUCT, :name => 'entityNotExistError', :class => ::CadenceThrift::EntityNotExistsError},
        DOMAINNOTACTIVEERROR => {:type => ::Thrift::Types::STRUCT, :name => 'domainNotActiveError', :class => ::CadenceThrift::DomainNotActiveError},
        LIMITEXCEEDEDERROR => {:type => ::Thrift::Types::STRUCT, :name => 'limitExceededError', :class => ::CadenceThrift::LimitExceededError},
        SERVICEBUSYERROR => {:type => ::Thrift::Types::STRUCT, :name => 'serviceBusyError', :class => ::CadenceThrift::ServiceBusyError},
        CLIENTVERSIONNOTSUPPORTEDERROR => {:type => ::Thrift::Types::STRUCT, :name => 'clientVersionNotSupportedError', :class => ::CadenceThrift::ClientVersionNotSupportedError}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class RespondActivityTaskFailedByID_args
      include ::Thrift::Struct, ::Thrift::Struct_Union
      FAILREQUEST = 1

      FIELDS = {
        FAILREQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'failRequest', :class => ::CadenceThrift::RespondActivityTaskFailedByIDRequest}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class RespondActivityTaskFailedByID_result
      include ::Thrift::Struct, ::Thrift::Struct_Union
      BADREQUESTERROR = 1
      INTERNALSERVICEERROR = 2
      ENTITYNOTEXISTERROR = 3
      DOMAINNOTACTIVEERROR = 4
      LIMITEXCEEDEDERROR = 5
      SERVICEBUSYERROR = 6
      CLIENTVERSIONNOTSUPPORTEDERROR = 7

      FIELDS = {
        BADREQUESTERROR => {:type => ::Thrift::Types::STRUCT, :name => 'badRequestError', :class => ::CadenceThrift::BadRequestError},
        INTERNALSERVICEERROR => {:type => ::Thrift::Types::STRUCT, :name => 'internalServiceError', :class => ::CadenceThrift::InternalServiceError},
        ENTITYNOTEXISTERROR => {:type => ::Thrift::Types::STRUCT, :name => 'entityNotExistError', :class => ::CadenceThrift::EntityNotExistsError},
        DOMAINNOTACTIVEERROR => {:type => ::Thrift::Types::STRUCT, :name => 'domainNotActiveError', :class => ::CadenceThrift::DomainNotActiveError},
        LIMITEXCEEDEDERROR => {:type => ::Thrift::Types::STRUCT, :name => 'limitExceededError', :class => ::CadenceThrift::LimitExceededError},
        SERVICEBUSYERROR => {:type => ::Thrift::Types::STRUCT, :name => 'serviceBusyError', :class => ::CadenceThrift::ServiceBusyError},
        CLIENTVERSIONNOTSUPPORTEDERROR => {:type => ::Thrift::Types::STRUCT, :name => 'clientVersionNotSupportedError', :class => ::CadenceThrift::ClientVersionNotSupportedError}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class RespondActivityTaskCanceled_args
      include ::Thrift::Struct, ::Thrift::Struct_Union
      CANCELEDREQUEST = 1

      FIELDS = {
        CANCELEDREQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'canceledRequest', :class => ::CadenceThrift::RespondActivityTaskCanceledRequest}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class RespondActivityTaskCanceled_result
      include ::Thrift::Struct, ::Thrift::Struct_Union
      BADREQUESTERROR = 1
      INTERNALSERVICEERROR = 2
      ENTITYNOTEXISTERROR = 3
      DOMAINNOTACTIVEERROR = 4
      LIMITEXCEEDEDERROR = 5
      SERVICEBUSYERROR = 6
      CLIENTVERSIONNOTSUPPORTEDERROR = 7

      FIELDS = {
        BADREQUESTERROR => {:type => ::Thrift::Types::STRUCT, :name => 'badRequestError', :class => ::CadenceThrift::BadRequestError},
        INTERNALSERVICEERROR => {:type => ::Thrift::Types::STRUCT, :name => 'internalServiceError', :class => ::CadenceThrift::InternalServiceError},
        ENTITYNOTEXISTERROR => {:type => ::Thrift::Types::STRUCT, :name => 'entityNotExistError', :class => ::CadenceThrift::EntityNotExistsError},
        DOMAINNOTACTIVEERROR => {:type => ::Thrift::Types::STRUCT, :name => 'domainNotActiveError', :class => ::CadenceThrift::DomainNotActiveError},
        LIMITEXCEEDEDERROR => {:type => ::Thrift::Types::STRUCT, :name => 'limitExceededError', :class => ::CadenceThrift::LimitExceededError},
        SERVICEBUSYERROR => {:type => ::Thrift::Types::STRUCT, :name => 'serviceBusyError', :class => ::CadenceThrift::ServiceBusyError},
        CLIENTVERSIONNOTSUPPORTEDERROR => {:type => ::Thrift::Types::STRUCT, :name => 'clientVersionNotSupportedError', :class => ::CadenceThrift::ClientVersionNotSupportedError}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class RespondActivityTaskCanceledByID_args
      include ::Thrift::Struct, ::Thrift::Struct_Union
      CANCELEDREQUEST = 1

      FIELDS = {
        CANCELEDREQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'canceledRequest', :class => ::CadenceThrift::RespondActivityTaskCanceledByIDRequest}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class RespondActivityTaskCanceledByID_result
      include ::Thrift::Struct, ::Thrift::Struct_Union
      BADREQUESTERROR = 1
      INTERNALSERVICEERROR = 2
      ENTITYNOTEXISTERROR = 3
      DOMAINNOTACTIVEERROR = 4
      LIMITEXCEEDEDERROR = 5
      SERVICEBUSYERROR = 6
      CLIENTVERSIONNOTSUPPORTEDERROR = 7

      FIELDS = {
        BADREQUESTERROR => {:type => ::Thrift::Types::STRUCT, :name => 'badRequestError', :class => ::CadenceThrift::BadRequestError},
        INTERNALSERVICEERROR => {:type => ::Thrift::Types::STRUCT, :name => 'internalServiceError', :class => ::CadenceThrift::InternalServiceError},
        ENTITYNOTEXISTERROR => {:type => ::Thrift::Types::STRUCT, :name => 'entityNotExistError', :class => ::CadenceThrift::EntityNotExistsError},
        DOMAINNOTACTIVEERROR => {:type => ::Thrift::Types::STRUCT, :name => 'domainNotActiveError', :class => ::CadenceThrift::DomainNotActiveError},
        LIMITEXCEEDEDERROR => {:type => ::Thrift::Types::STRUCT, :name => 'limitExceededError', :class => ::CadenceThrift::LimitExceededError},
        SERVICEBUSYERROR => {:type => ::Thrift::Types::STRUCT, :name => 'serviceBusyError', :class => ::CadenceThrift::ServiceBusyError},
        CLIENTVERSIONNOTSUPPORTEDERROR => {:type => ::Thrift::Types::STRUCT, :name => 'clientVersionNotSupportedError', :class => ::CadenceThrift::ClientVersionNotSupportedError}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class RequestCancelWorkflowExecution_args
      include ::Thrift::Struct, ::Thrift::Struct_Union
      CANCELREQUEST = 1

      FIELDS = {
        CANCELREQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'cancelRequest', :class => ::CadenceThrift::RequestCancelWorkflowExecutionRequest}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class RequestCancelWorkflowExecution_result
      include ::Thrift::Struct, ::Thrift::Struct_Union
      BADREQUESTERROR = 1
      INTERNALSERVICEERROR = 2
      ENTITYNOTEXISTERROR = 3
      CANCELLATIONALREADYREQUESTEDERROR = 4
      SERVICEBUSYERROR = 5
      DOMAINNOTACTIVEERROR = 6
      LIMITEXCEEDEDERROR = 7
      CLIENTVERSIONNOTSUPPORTEDERROR = 8

      FIELDS = {
        BADREQUESTERROR => {:type => ::Thrift::Types::STRUCT, :name => 'badRequestError', :class => ::CadenceThrift::BadRequestError},
        INTERNALSERVICEERROR => {:type => ::Thrift::Types::STRUCT, :name => 'internalServiceError', :class => ::CadenceThrift::InternalServiceError},
        ENTITYNOTEXISTERROR => {:type => ::Thrift::Types::STRUCT, :name => 'entityNotExistError', :class => ::CadenceThrift::EntityNotExistsError},
        CANCELLATIONALREADYREQUESTEDERROR => {:type => ::Thrift::Types::STRUCT, :name => 'cancellationAlreadyRequestedError', :class => ::CadenceThrift::CancellationAlreadyRequestedError},
        SERVICEBUSYERROR => {:type => ::Thrift::Types::STRUCT, :name => 'serviceBusyError', :class => ::CadenceThrift::ServiceBusyError},
        DOMAINNOTACTIVEERROR => {:type => ::Thrift::Types::STRUCT, :name => 'domainNotActiveError', :class => ::CadenceThrift::DomainNotActiveError},
        LIMITEXCEEDEDERROR => {:type => ::Thrift::Types::STRUCT, :name => 'limitExceededError', :class => ::CadenceThrift::LimitExceededError},
        CLIENTVERSIONNOTSUPPORTEDERROR => {:type => ::Thrift::Types::STRUCT, :name => 'clientVersionNotSupportedError', :class => ::CadenceThrift::ClientVersionNotSupportedError}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class SignalWorkflowExecution_args
      include ::Thrift::Struct, ::Thrift::Struct_Union
      SIGNALREQUEST = 1

      FIELDS = {
        SIGNALREQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'signalRequest', :class => ::CadenceThrift::SignalWorkflowExecutionRequest}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class SignalWorkflowExecution_result
      include ::Thrift::Struct, ::Thrift::Struct_Union
      BADREQUESTERROR = 1
      INTERNALSERVICEERROR = 2
      ENTITYNOTEXISTERROR = 3
      SERVICEBUSYERROR = 4
      DOMAINNOTACTIVEERROR = 5
      LIMITEXCEEDEDERROR = 6
      CLIENTVERSIONNOTSUPPORTEDERROR = 7

      FIELDS = {
        BADREQUESTERROR => {:type => ::Thrift::Types::STRUCT, :name => 'badRequestError', :class => ::CadenceThrift::BadRequestError},
        INTERNALSERVICEERROR => {:type => ::Thrift::Types::STRUCT, :name => 'internalServiceError', :class => ::CadenceThrift::InternalServiceError},
        ENTITYNOTEXISTERROR => {:type => ::Thrift::Types::STRUCT, :name => 'entityNotExistError', :class => ::CadenceThrift::EntityNotExistsError},
        SERVICEBUSYERROR => {:type => ::Thrift::Types::STRUCT, :name => 'serviceBusyError', :class => ::CadenceThrift::ServiceBusyError},
        DOMAINNOTACTIVEERROR => {:type => ::Thrift::Types::STRUCT, :name => 'domainNotActiveError', :class => ::CadenceThrift::DomainNotActiveError},
        LIMITEXCEEDEDERROR => {:type => ::Thrift::Types::STRUCT, :name => 'limitExceededError', :class => ::CadenceThrift::LimitExceededError},
        CLIENTVERSIONNOTSUPPORTEDERROR => {:type => ::Thrift::Types::STRUCT, :name => 'clientVersionNotSupportedError', :class => ::CadenceThrift::ClientVersionNotSupportedError}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class SignalWithStartWorkflowExecution_args
      include ::Thrift::Struct, ::Thrift::Struct_Union
      SIGNALWITHSTARTREQUEST = 1

      FIELDS = {
        SIGNALWITHSTARTREQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'signalWithStartRequest', :class => ::CadenceThrift::SignalWithStartWorkflowExecutionRequest}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class SignalWithStartWorkflowExecution_result
      include ::Thrift::Struct, ::Thrift::Struct_Union
      SUCCESS = 0
      BADREQUESTERROR = 1
      INTERNALSERVICEERROR = 2
      ENTITYNOTEXISTERROR = 3
      SERVICEBUSYERROR = 4
      DOMAINNOTACTIVEERROR = 5
      LIMITEXCEEDEDERROR = 6
      WORKFLOWALREADYSTARTEDERROR = 7
      CLIENTVERSIONNOTSUPPORTEDERROR = 8

      FIELDS = {
        SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::CadenceThrift::StartWorkflowExecutionResponse},
        BADREQUESTERROR => {:type => ::Thrift::Types::STRUCT, :name => 'badRequestError', :class => ::CadenceThrift::BadRequestError},
        INTERNALSERVICEERROR => {:type => ::Thrift::Types::STRUCT, :name => 'internalServiceError', :class => ::CadenceThrift::InternalServiceError},
        ENTITYNOTEXISTERROR => {:type => ::Thrift::Types::STRUCT, :name => 'entityNotExistError', :class => ::CadenceThrift::EntityNotExistsError},
        SERVICEBUSYERROR => {:type => ::Thrift::Types::STRUCT, :name => 'serviceBusyError', :class => ::CadenceThrift::ServiceBusyError},
        DOMAINNOTACTIVEERROR => {:type => ::Thrift::Types::STRUCT, :name => 'domainNotActiveError', :class => ::CadenceThrift::DomainNotActiveError},
        LIMITEXCEEDEDERROR => {:type => ::Thrift::Types::STRUCT, :name => 'limitExceededError', :class => ::CadenceThrift::LimitExceededError},
        WORKFLOWALREADYSTARTEDERROR => {:type => ::Thrift::Types::STRUCT, :name => 'workflowAlreadyStartedError', :class => ::CadenceThrift::WorkflowExecutionAlreadyStartedError},
        CLIENTVERSIONNOTSUPPORTEDERROR => {:type => ::Thrift::Types::STRUCT, :name => 'clientVersionNotSupportedError', :class => ::CadenceThrift::ClientVersionNotSupportedError}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class ResetWorkflowExecution_args
      include ::Thrift::Struct, ::Thrift::Struct_Union
      RESETREQUEST = 1

      FIELDS = {
        RESETREQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'resetRequest', :class => ::CadenceThrift::ResetWorkflowExecutionRequest}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class ResetWorkflowExecution_result
      include ::Thrift::Struct, ::Thrift::Struct_Union
      SUCCESS = 0
      BADREQUESTERROR = 1
      INTERNALSERVICEERROR = 2
      ENTITYNOTEXISTERROR = 3
      SERVICEBUSYERROR = 4
      DOMAINNOTACTIVEERROR = 5
      LIMITEXCEEDEDERROR = 6
      CLIENTVERSIONNOTSUPPORTEDERROR = 7

      FIELDS = {
        SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::CadenceThrift::ResetWorkflowExecutionResponse},
        BADREQUESTERROR => {:type => ::Thrift::Types::STRUCT, :name => 'badRequestError', :class => ::CadenceThrift::BadRequestError},
        INTERNALSERVICEERROR => {:type => ::Thrift::Types::STRUCT, :name => 'internalServiceError', :class => ::CadenceThrift::InternalServiceError},
        ENTITYNOTEXISTERROR => {:type => ::Thrift::Types::STRUCT, :name => 'entityNotExistError', :class => ::CadenceThrift::EntityNotExistsError},
        SERVICEBUSYERROR => {:type => ::Thrift::Types::STRUCT, :name => 'serviceBusyError', :class => ::CadenceThrift::ServiceBusyError},
        DOMAINNOTACTIVEERROR => {:type => ::Thrift::Types::STRUCT, :name => 'domainNotActiveError', :class => ::CadenceThrift::DomainNotActiveError},
        LIMITEXCEEDEDERROR => {:type => ::Thrift::Types::STRUCT, :name => 'limitExceededError', :class => ::CadenceThrift::LimitExceededError},
        CLIENTVERSIONNOTSUPPORTEDERROR => {:type => ::Thrift::Types::STRUCT, :name => 'clientVersionNotSupportedError', :class => ::CadenceThrift::ClientVersionNotSupportedError}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class TerminateWorkflowExecution_args
      include ::Thrift::Struct, ::Thrift::Struct_Union
      TERMINATEREQUEST = 1

      FIELDS = {
        TERMINATEREQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'terminateRequest', :class => ::CadenceThrift::TerminateWorkflowExecutionRequest}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class TerminateWorkflowExecution_result
      include ::Thrift::Struct, ::Thrift::Struct_Union
      BADREQUESTERROR = 1
      INTERNALSERVICEERROR = 2
      ENTITYNOTEXISTERROR = 3
      SERVICEBUSYERROR = 4
      DOMAINNOTACTIVEERROR = 5
      LIMITEXCEEDEDERROR = 6
      CLIENTVERSIONNOTSUPPORTEDERROR = 7

      FIELDS = {
        BADREQUESTERROR => {:type => ::Thrift::Types::STRUCT, :name => 'badRequestError', :class => ::CadenceThrift::BadRequestError},
        INTERNALSERVICEERROR => {:type => ::Thrift::Types::STRUCT, :name => 'internalServiceError', :class => ::CadenceThrift::InternalServiceError},
        ENTITYNOTEXISTERROR => {:type => ::Thrift::Types::STRUCT, :name => 'entityNotExistError', :class => ::CadenceThrift::EntityNotExistsError},
        SERVICEBUSYERROR => {:type => ::Thrift::Types::STRUCT, :name => 'serviceBusyError', :class => ::CadenceThrift::ServiceBusyError},
        DOMAINNOTACTIVEERROR => {:type => ::Thrift::Types::STRUCT, :name => 'domainNotActiveError', :class => ::CadenceThrift::DomainNotActiveError},
        LIMITEXCEEDEDERROR => {:type => ::Thrift::Types::STRUCT, :name => 'limitExceededError', :class => ::CadenceThrift::LimitExceededError},
        CLIENTVERSIONNOTSUPPORTEDERROR => {:type => ::Thrift::Types::STRUCT, :name => 'clientVersionNotSupportedError', :class => ::CadenceThrift::ClientVersionNotSupportedError}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class ListOpenWorkflowExecutions_args
      include ::Thrift::Struct, ::Thrift::Struct_Union
      LISTREQUEST = 1

      FIELDS = {
        LISTREQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'listRequest', :class => ::CadenceThrift::ListOpenWorkflowExecutionsRequest}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class ListOpenWorkflowExecutions_result
      include ::Thrift::Struct, ::Thrift::Struct_Union
      SUCCESS = 0
      BADREQUESTERROR = 1
      INTERNALSERVICEERROR = 2
      ENTITYNOTEXISTERROR = 3
      SERVICEBUSYERROR = 4
      LIMITEXCEEDEDERROR = 5
      CLIENTVERSIONNOTSUPPORTEDERROR = 6

      FIELDS = {
        SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::CadenceThrift::ListOpenWorkflowExecutionsResponse},
        BADREQUESTERROR => {:type => ::Thrift::Types::STRUCT, :name => 'badRequestError', :class => ::CadenceThrift::BadRequestError},
        INTERNALSERVICEERROR => {:type => ::Thrift::Types::STRUCT, :name => 'internalServiceError', :class => ::CadenceThrift::InternalServiceError},
        ENTITYNOTEXISTERROR => {:type => ::Thrift::Types::STRUCT, :name => 'entityNotExistError', :class => ::CadenceThrift::EntityNotExistsError},
        SERVICEBUSYERROR => {:type => ::Thrift::Types::STRUCT, :name => 'serviceBusyError', :class => ::CadenceThrift::ServiceBusyError},
        LIMITEXCEEDEDERROR => {:type => ::Thrift::Types::STRUCT, :name => 'limitExceededError', :class => ::CadenceThrift::LimitExceededError},
        CLIENTVERSIONNOTSUPPORTEDERROR => {:type => ::Thrift::Types::STRUCT, :name => 'clientVersionNotSupportedError', :class => ::CadenceThrift::ClientVersionNotSupportedError}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class ListClosedWorkflowExecutions_args
      include ::Thrift::Struct, ::Thrift::Struct_Union
      LISTREQUEST = 1

      FIELDS = {
        LISTREQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'listRequest', :class => ::CadenceThrift::ListClosedWorkflowExecutionsRequest}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class ListClosedWorkflowExecutions_result
      include ::Thrift::Struct, ::Thrift::Struct_Union
      SUCCESS = 0
      BADREQUESTERROR = 1
      INTERNALSERVICEERROR = 2
      ENTITYNOTEXISTERROR = 3
      SERVICEBUSYERROR = 4
      CLIENTVERSIONNOTSUPPORTEDERROR = 5

      FIELDS = {
        SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::CadenceThrift::ListClosedWorkflowExecutionsResponse},
        BADREQUESTERROR => {:type => ::Thrift::Types::STRUCT, :name => 'badRequestError', :class => ::CadenceThrift::BadRequestError},
        INTERNALSERVICEERROR => {:type => ::Thrift::Types::STRUCT, :name => 'internalServiceError', :class => ::CadenceThrift::InternalServiceError},
        ENTITYNOTEXISTERROR => {:type => ::Thrift::Types::STRUCT, :name => 'entityNotExistError', :class => ::CadenceThrift::EntityNotExistsError},
        SERVICEBUSYERROR => {:type => ::Thrift::Types::STRUCT, :name => 'serviceBusyError', :class => ::CadenceThrift::ServiceBusyError},
        CLIENTVERSIONNOTSUPPORTEDERROR => {:type => ::Thrift::Types::STRUCT, :name => 'clientVersionNotSupportedError', :class => ::CadenceThrift::ClientVersionNotSupportedError}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class ListWorkflowExecutions_args
      include ::Thrift::Struct, ::Thrift::Struct_Union
      LISTREQUEST = 1

      FIELDS = {
        LISTREQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'listRequest', :class => ::CadenceThrift::ListWorkflowExecutionsRequest}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class ListWorkflowExecutions_result
      include ::Thrift::Struct, ::Thrift::Struct_Union
      SUCCESS = 0
      BADREQUESTERROR = 1
      INTERNALSERVICEERROR = 2
      ENTITYNOTEXISTERROR = 3
      SERVICEBUSYERROR = 4
      CLIENTVERSIONNOTSUPPORTEDERROR = 5

      FIELDS = {
        SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::CadenceThrift::ListWorkflowExecutionsResponse},
        BADREQUESTERROR => {:type => ::Thrift::Types::STRUCT, :name => 'badRequestError', :class => ::CadenceThrift::BadRequestError},
        INTERNALSERVICEERROR => {:type => ::Thrift::Types::STRUCT, :name => 'internalServiceError', :class => ::CadenceThrift::InternalServiceError},
        ENTITYNOTEXISTERROR => {:type => ::Thrift::Types::STRUCT, :name => 'entityNotExistError', :class => ::CadenceThrift::EntityNotExistsError},
        SERVICEBUSYERROR => {:type => ::Thrift::Types::STRUCT, :name => 'serviceBusyError', :class => ::CadenceThrift::ServiceBusyError},
        CLIENTVERSIONNOTSUPPORTEDERROR => {:type => ::Thrift::Types::STRUCT, :name => 'clientVersionNotSupportedError', :class => ::CadenceThrift::ClientVersionNotSupportedError}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class ListArchivedWorkflowExecutions_args
      include ::Thrift::Struct, ::Thrift::Struct_Union
      LISTREQUEST = 1

      FIELDS = {
        LISTREQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'listRequest', :class => ::CadenceThrift::ListArchivedWorkflowExecutionsRequest}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class ListArchivedWorkflowExecutions_result
      include ::Thrift::Struct, ::Thrift::Struct_Union
      SUCCESS = 0
      BADREQUESTERROR = 1
      INTERNALSERVICEERROR = 2
      ENTITYNOTEXISTERROR = 3
      SERVICEBUSYERROR = 4
      CLIENTVERSIONNOTSUPPORTEDERROR = 5

      FIELDS = {
        SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::CadenceThrift::ListArchivedWorkflowExecutionsResponse},
        BADREQUESTERROR => {:type => ::Thrift::Types::STRUCT, :name => 'badRequestError', :class => ::CadenceThrift::BadRequestError},
        INTERNALSERVICEERROR => {:type => ::Thrift::Types::STRUCT, :name => 'internalServiceError', :class => ::CadenceThrift::InternalServiceError},
        ENTITYNOTEXISTERROR => {:type => ::Thrift::Types::STRUCT, :name => 'entityNotExistError', :class => ::CadenceThrift::EntityNotExistsError},
        SERVICEBUSYERROR => {:type => ::Thrift::Types::STRUCT, :name => 'serviceBusyError', :class => ::CadenceThrift::ServiceBusyError},
        CLIENTVERSIONNOTSUPPORTEDERROR => {:type => ::Thrift::Types::STRUCT, :name => 'clientVersionNotSupportedError', :class => ::CadenceThrift::ClientVersionNotSupportedError}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class ScanWorkflowExecutions_args
      include ::Thrift::Struct, ::Thrift::Struct_Union
      LISTREQUEST = 1

      FIELDS = {
        LISTREQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'listRequest', :class => ::CadenceThrift::ListWorkflowExecutionsRequest}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class ScanWorkflowExecutions_result
      include ::Thrift::Struct, ::Thrift::Struct_Union
      SUCCESS = 0
      BADREQUESTERROR = 1
      INTERNALSERVICEERROR = 2
      ENTITYNOTEXISTERROR = 3
      SERVICEBUSYERROR = 4
      CLIENTVERSIONNOTSUPPORTEDERROR = 5

      FIELDS = {
        SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::CadenceThrift::ListWorkflowExecutionsResponse},
        BADREQUESTERROR => {:type => ::Thrift::Types::STRUCT, :name => 'badRequestError', :class => ::CadenceThrift::BadRequestError},
        INTERNALSERVICEERROR => {:type => ::Thrift::Types::STRUCT, :name => 'internalServiceError', :class => ::CadenceThrift::InternalServiceError},
        ENTITYNOTEXISTERROR => {:type => ::Thrift::Types::STRUCT, :name => 'entityNotExistError', :class => ::CadenceThrift::EntityNotExistsError},
        SERVICEBUSYERROR => {:type => ::Thrift::Types::STRUCT, :name => 'serviceBusyError', :class => ::CadenceThrift::ServiceBusyError},
        CLIENTVERSIONNOTSUPPORTEDERROR => {:type => ::Thrift::Types::STRUCT, :name => 'clientVersionNotSupportedError', :class => ::CadenceThrift::ClientVersionNotSupportedError}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class CountWorkflowExecutions_args
      include ::Thrift::Struct, ::Thrift::Struct_Union
      COUNTREQUEST = 1

      FIELDS = {
        COUNTREQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'countRequest', :class => ::CadenceThrift::CountWorkflowExecutionsRequest}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class CountWorkflowExecutions_result
      include ::Thrift::Struct, ::Thrift::Struct_Union
      SUCCESS = 0
      BADREQUESTERROR = 1
      INTERNALSERVICEERROR = 2
      ENTITYNOTEXISTERROR = 3
      SERVICEBUSYERROR = 4
      CLIENTVERSIONNOTSUPPORTEDERROR = 5

      FIELDS = {
        SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::CadenceThrift::CountWorkflowExecutionsResponse},
        BADREQUESTERROR => {:type => ::Thrift::Types::STRUCT, :name => 'badRequestError', :class => ::CadenceThrift::BadRequestError},
        INTERNALSERVICEERROR => {:type => ::Thrift::Types::STRUCT, :name => 'internalServiceError', :class => ::CadenceThrift::InternalServiceError},
        ENTITYNOTEXISTERROR => {:type => ::Thrift::Types::STRUCT, :name => 'entityNotExistError', :class => ::CadenceThrift::EntityNotExistsError},
        SERVICEBUSYERROR => {:type => ::Thrift::Types::STRUCT, :name => 'serviceBusyError', :class => ::CadenceThrift::ServiceBusyError},
        CLIENTVERSIONNOTSUPPORTEDERROR => {:type => ::Thrift::Types::STRUCT, :name => 'clientVersionNotSupportedError', :class => ::CadenceThrift::ClientVersionNotSupportedError}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class GetSearchAttributes_args
      include ::Thrift::Struct, ::Thrift::Struct_Union

      FIELDS = {

      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class GetSearchAttributes_result
      include ::Thrift::Struct, ::Thrift::Struct_Union
      SUCCESS = 0
      INTERNALSERVICEERROR = 1
      SERVICEBUSYERROR = 2
      CLIENTVERSIONNOTSUPPORTEDERROR = 3

      FIELDS = {
        SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::CadenceThrift::GetSearchAttributesResponse},
        INTERNALSERVICEERROR => {:type => ::Thrift::Types::STRUCT, :name => 'internalServiceError', :class => ::CadenceThrift::InternalServiceError},
        SERVICEBUSYERROR => {:type => ::Thrift::Types::STRUCT, :name => 'serviceBusyError', :class => ::CadenceThrift::ServiceBusyError},
        CLIENTVERSIONNOTSUPPORTEDERROR => {:type => ::Thrift::Types::STRUCT, :name => 'clientVersionNotSupportedError', :class => ::CadenceThrift::ClientVersionNotSupportedError}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class RespondQueryTaskCompleted_args
      include ::Thrift::Struct, ::Thrift::Struct_Union
      COMPLETEREQUEST = 1

      FIELDS = {
        COMPLETEREQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'completeRequest', :class => ::CadenceThrift::RespondQueryTaskCompletedRequest}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class RespondQueryTaskCompleted_result
      include ::Thrift::Struct, ::Thrift::Struct_Union
      BADREQUESTERROR = 1
      INTERNALSERVICEERROR = 2
      ENTITYNOTEXISTERROR = 3
      LIMITEXCEEDEDERROR = 4
      SERVICEBUSYERROR = 5
      DOMAINNOTACTIVEERROR = 6
      CLIENTVERSIONNOTSUPPORTEDERROR = 7

      FIELDS = {
        BADREQUESTERROR => {:type => ::Thrift::Types::STRUCT, :name => 'badRequestError', :class => ::CadenceThrift::BadRequestError},
        INTERNALSERVICEERROR => {:type => ::Thrift::Types::STRUCT, :name => 'internalServiceError', :class => ::CadenceThrift::InternalServiceError},
        ENTITYNOTEXISTERROR => {:type => ::Thrift::Types::STRUCT, :name => 'entityNotExistError', :class => ::CadenceThrift::EntityNotExistsError},
        LIMITEXCEEDEDERROR => {:type => ::Thrift::Types::STRUCT, :name => 'limitExceededError', :class => ::CadenceThrift::LimitExceededError},
        SERVICEBUSYERROR => {:type => ::Thrift::Types::STRUCT, :name => 'serviceBusyError', :class => ::CadenceThrift::ServiceBusyError},
        DOMAINNOTACTIVEERROR => {:type => ::Thrift::Types::STRUCT, :name => 'domainNotActiveError', :class => ::CadenceThrift::DomainNotActiveError},
        CLIENTVERSIONNOTSUPPORTEDERROR => {:type => ::Thrift::Types::STRUCT, :name => 'clientVersionNotSupportedError', :class => ::CadenceThrift::ClientVersionNotSupportedError}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class ResetStickyTaskList_args
      include ::Thrift::Struct, ::Thrift::Struct_Union
      RESETREQUEST = 1

      FIELDS = {
        RESETREQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'resetRequest', :class => ::CadenceThrift::ResetStickyTaskListRequest}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class ResetStickyTaskList_result
      include ::Thrift::Struct, ::Thrift::Struct_Union
      SUCCESS = 0
      BADREQUESTERROR = 1
      INTERNALSERVICEERROR = 2
      ENTITYNOTEXISTERROR = 3
      LIMITEXCEEDEDERROR = 4
      SERVICEBUSYERROR = 5
      DOMAINNOTACTIVEERROR = 6
      CLIENTVERSIONNOTSUPPORTEDERROR = 7

      FIELDS = {
        SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::CadenceThrift::ResetStickyTaskListResponse},
        BADREQUESTERROR => {:type => ::Thrift::Types::STRUCT, :name => 'badRequestError', :class => ::CadenceThrift::BadRequestError},
        INTERNALSERVICEERROR => {:type => ::Thrift::Types::STRUCT, :name => 'internalServiceError', :class => ::CadenceThrift::InternalServiceError},
        ENTITYNOTEXISTERROR => {:type => ::Thrift::Types::STRUCT, :name => 'entityNotExistError', :class => ::CadenceThrift::EntityNotExistsError},
        LIMITEXCEEDEDERROR => {:type => ::Thrift::Types::STRUCT, :name => 'limitExceededError', :class => ::CadenceThrift::LimitExceededError},
        SERVICEBUSYERROR => {:type => ::Thrift::Types::STRUCT, :name => 'serviceBusyError', :class => ::CadenceThrift::ServiceBusyError},
        DOMAINNOTACTIVEERROR => {:type => ::Thrift::Types::STRUCT, :name => 'domainNotActiveError', :class => ::CadenceThrift::DomainNotActiveError},
        CLIENTVERSIONNOTSUPPORTEDERROR => {:type => ::Thrift::Types::STRUCT, :name => 'clientVersionNotSupportedError', :class => ::CadenceThrift::ClientVersionNotSupportedError}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class QueryWorkflow_args
      include ::Thrift::Struct, ::Thrift::Struct_Union
      QUERYREQUEST = 1

      FIELDS = {
        QUERYREQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'queryRequest', :class => ::CadenceThrift::QueryWorkflowRequest}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class QueryWorkflow_result
      include ::Thrift::Struct, ::Thrift::Struct_Union
      SUCCESS = 0
      BADREQUESTERROR = 1
      INTERNALSERVICEERROR = 2
      ENTITYNOTEXISTERROR = 3
      QUERYFAILEDERROR = 4
      LIMITEXCEEDEDERROR = 5
      SERVICEBUSYERROR = 6
      CLIENTVERSIONNOTSUPPORTEDERROR = 7

      FIELDS = {
        SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::CadenceThrift::QueryWorkflowResponse},
        BADREQUESTERROR => {:type => ::Thrift::Types::STRUCT, :name => 'badRequestError', :class => ::CadenceThrift::BadRequestError},
        INTERNALSERVICEERROR => {:type => ::Thrift::Types::STRUCT, :name => 'internalServiceError', :class => ::CadenceThrift::InternalServiceError},
        ENTITYNOTEXISTERROR => {:type => ::Thrift::Types::STRUCT, :name => 'entityNotExistError', :class => ::CadenceThrift::EntityNotExistsError},
        QUERYFAILEDERROR => {:type => ::Thrift::Types::STRUCT, :name => 'queryFailedError', :class => ::CadenceThrift::QueryFailedError},
        LIMITEXCEEDEDERROR => {:type => ::Thrift::Types::STRUCT, :name => 'limitExceededError', :class => ::CadenceThrift::LimitExceededError},
        SERVICEBUSYERROR => {:type => ::Thrift::Types::STRUCT, :name => 'serviceBusyError', :class => ::CadenceThrift::ServiceBusyError},
        CLIENTVERSIONNOTSUPPORTEDERROR => {:type => ::Thrift::Types::STRUCT, :name => 'clientVersionNotSupportedError', :class => ::CadenceThrift::ClientVersionNotSupportedError}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class DescribeWorkflowExecution_args
      include ::Thrift::Struct, ::Thrift::Struct_Union
      DESCRIBEREQUEST = 1

      FIELDS = {
        DESCRIBEREQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'describeRequest', :class => ::CadenceThrift::DescribeWorkflowExecutionRequest}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class DescribeWorkflowExecution_result
      include ::Thrift::Struct, ::Thrift::Struct_Union
      SUCCESS = 0
      BADREQUESTERROR = 1
      INTERNALSERVICEERROR = 2
      ENTITYNOTEXISTERROR = 3
      LIMITEXCEEDEDERROR = 4
      SERVICEBUSYERROR = 5
      CLIENTVERSIONNOTSUPPORTEDERROR = 6

      FIELDS = {
        SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::CadenceThrift::DescribeWorkflowExecutionResponse},
        BADREQUESTERROR => {:type => ::Thrift::Types::STRUCT, :name => 'badRequestError', :class => ::CadenceThrift::BadRequestError},
        INTERNALSERVICEERROR => {:type => ::Thrift::Types::STRUCT, :name => 'internalServiceError', :class => ::CadenceThrift::InternalServiceError},
        ENTITYNOTEXISTERROR => {:type => ::Thrift::Types::STRUCT, :name => 'entityNotExistError', :class => ::CadenceThrift::EntityNotExistsError},
        LIMITEXCEEDEDERROR => {:type => ::Thrift::Types::STRUCT, :name => 'limitExceededError', :class => ::CadenceThrift::LimitExceededError},
        SERVICEBUSYERROR => {:type => ::Thrift::Types::STRUCT, :name => 'serviceBusyError', :class => ::CadenceThrift::ServiceBusyError},
        CLIENTVERSIONNOTSUPPORTEDERROR => {:type => ::Thrift::Types::STRUCT, :name => 'clientVersionNotSupportedError', :class => ::CadenceThrift::ClientVersionNotSupportedError}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class DescribeTaskList_args
      include ::Thrift::Struct, ::Thrift::Struct_Union
      REQUEST = 1

      FIELDS = {
        REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::CadenceThrift::DescribeTaskListRequest}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class DescribeTaskList_result
      include ::Thrift::Struct, ::Thrift::Struct_Union
      SUCCESS = 0
      BADREQUESTERROR = 1
      INTERNALSERVICEERROR = 2
      ENTITYNOTEXISTERROR = 3
      LIMITEXCEEDEDERROR = 4
      SERVICEBUSYERROR = 5
      CLIENTVERSIONNOTSUPPORTEDERROR = 6

      FIELDS = {
        SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::CadenceThrift::DescribeTaskListResponse},
        BADREQUESTERROR => {:type => ::Thrift::Types::STRUCT, :name => 'badRequestError', :class => ::CadenceThrift::BadRequestError},
        INTERNALSERVICEERROR => {:type => ::Thrift::Types::STRUCT, :name => 'internalServiceError', :class => ::CadenceThrift::InternalServiceError},
        ENTITYNOTEXISTERROR => {:type => ::Thrift::Types::STRUCT, :name => 'entityNotExistError', :class => ::CadenceThrift::EntityNotExistsError},
        LIMITEXCEEDEDERROR => {:type => ::Thrift::Types::STRUCT, :name => 'limitExceededError', :class => ::CadenceThrift::LimitExceededError},
        SERVICEBUSYERROR => {:type => ::Thrift::Types::STRUCT, :name => 'serviceBusyError', :class => ::CadenceThrift::ServiceBusyError},
        CLIENTVERSIONNOTSUPPORTEDERROR => {:type => ::Thrift::Types::STRUCT, :name => 'clientVersionNotSupportedError', :class => ::CadenceThrift::ClientVersionNotSupportedError}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

  end

end
